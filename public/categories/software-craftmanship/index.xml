<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Software Craftmanship on Cello&#39;s Blog</title>
        <link>http://localhost:1313/categories/software-craftmanship/</link>
        <description>Recent content in Software Craftmanship on Cello&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 26 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/software-craftmanship/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>How I explained IoC and DI to our Senior Software Engineer</title>
        <link>http://localhost:1313/how-i-explained-ioc-and-di-to-our-senior-software-engineer/</link>
        <pubDate>Mon, 26 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/how-i-explained-ioc-and-di-to-our-senior-software-engineer/</guid>
        <description>&lt;img src="http://localhost:1313/how-i-explained-ioc-and-di-to-our-senior-software-engineer/cover.jpg" alt="Featured image of post How I explained IoC and DI to our Senior Software Engineer" /&gt;&lt;p&gt;Inversion of Control and Dependency Injection are two of these big buzz words you always hear when talking about modern software development. At least they were when I started going professional. That’s why I invested quite some time to research that topic. I was surprised that our Senior Software Engineer did not…&lt;/p&gt;
&lt;p&gt;I had to explain it to him while reviewing some of my code. I still remember his reaction:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That’s it? That easy? I was completely mystified by that stuff for years and you just explained it to me in a short call?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If even my valued colleague, who was my mentor for the past few years, still didn’t get that concept, I thought it might be worth writing yet another explanation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Inversion of Control and Dependency Injection for Dummies!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;dependency-injection&#34;&gt;Dependency Injection
&lt;/h2&gt;&lt;p&gt;Let’s say you want to write a piece of code that tracks how much time you spend in front of your computer. You might come up with a simple API like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; ComputerTimeTracker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IComputerTimeTracker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StartTracking();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StopTracking();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TimeSpan GetTimeSpendInFrontOfComputer();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If my colleague implemented that interface a few years back it would have looked somehow like that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Diagnostics;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; ComputerTimeTracker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ComputerTimeTracker&lt;/span&gt; : IComputerTimeTracker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Stopwatch _stopWatch;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ComputerTimeTracker()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _stopWatch = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Stopwatch();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StartTracking()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _stopWatch.Start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StopTracking()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _stopWatch.Stop();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TimeSpan GetTimeSpendInFrontOfComputer()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _stopWatch.Elapsed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simple and straight-forward. The only thing this class needs to do its work is a &lt;code&gt;Stopwatch&lt;/code&gt; instance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The class needs an instance of &lt;code&gt;Stopwatch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The class is dependent on a &lt;code&gt;Stopwatch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Stopwatch&lt;/code&gt; is a dependency of the class &lt;code&gt;ComputerTimeTracker&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So far, so good. Now let’s just do a little modification to that code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Diagnostics;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; ComputerTimeTracker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ComputerTimeTracker&lt;/span&gt; : IComputerTimeTracker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Stopwatch _stopWatch;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ComputerTimeTracker(Stopwatch stopWatch)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _stopWatch = stopWatch;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StartTracking()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _stopWatch.Start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StopTracking()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _stopWatch.Stop();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TimeSpan GetTimeSpendInFrontOfComputer()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _stopWatch.Elapsed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only thing that changed is the constructor.&lt;/p&gt;
&lt;p&gt;Instead of &lt;em&gt;creating&lt;/em&gt; the instance of &lt;code&gt;Stopwatch&lt;/code&gt; inside the constructor we &lt;em&gt;inject&lt;/em&gt; it into the constructor.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We inject the &lt;code&gt;Stopwatch&lt;/code&gt; into the constructor.&lt;/p&gt;
&lt;p&gt;We inject the dependency &lt;code&gt;Stopwatch&lt;/code&gt; into the constructor.&lt;/p&gt;
&lt;p&gt;We just did a dependency injection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I just want to make it clear: That is really all! Dependency injection means nothing more and nothing less than providing a dependency to someone who needs it instead of letting the someone create the dependency itself.&lt;/p&gt;
&lt;p&gt;It does not matter whether you inject the dependency via the class constructor, via a property, or via a setter-method. All you do is injecting a dependency.&lt;/p&gt;
&lt;h2 id=&#34;inversion-of-control&#34;&gt;Inversion of Control
&lt;/h2&gt;&lt;p&gt;To quote my colleague again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think we have to discuss this. Now I need to create the &lt;code&gt;Stopwatch&lt;/code&gt; instance before I can even create an instance of &lt;code&gt;ComputerTimeTracker&lt;/code&gt;. That sucks. Isn’t that a code smell? Object oriented programming always praises information hiding, but now I have to know about a &lt;code&gt;Stopwatch&lt;/code&gt;? When I create the instance inside the constructor I just have to create my &lt;code&gt;ComputerTimeTracker&lt;/code&gt;and it will handle the rest for me. I don’t want to know the implementation details, I just want to use the class. In summary: The &lt;code&gt;Stopwatch&lt;/code&gt; should be controlled by the &lt;code&gt;ComputerTimeTracker&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice how he already used the word &lt;em&gt;controlled&lt;/em&gt;. I’m just gonna think that thought a little bit further:&lt;/p&gt;
&lt;p&gt;In the approach of my colleague we have clear &lt;em&gt;order of control:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The class &lt;code&gt;ComputerTimeTracker&lt;/code&gt;is controlling the &lt;code&gt;Stopwatch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It’s the responsibility of the &lt;code&gt;ComputerTimeTracker&lt;/code&gt;to control the &lt;code&gt;Stopwatch&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now notice what changed when looking at the approach where we injected the &lt;code&gt;Stopwatch&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We, the users of &lt;code&gt;ComputerTimeTracker&lt;/code&gt;, are controlling the &lt;code&gt;Stopwatch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It’s the user’s responsibility to control the &lt;code&gt;Stopwatch&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You might have already noticed it. By injecting the dependency we inverted the order of control. We moved the responsibility to control the &lt;code&gt;Stopwatch&lt;/code&gt; from the class away to the user of the class. That is inversion of control. And again: That is really all!&lt;/p&gt;
&lt;h2 id=&#34;loose-coupling&#34;&gt;Loose Coupling
&lt;/h2&gt;&lt;p&gt;Now that the buzz words are de-mystified we can talk about why we might prefer the approach with dependency injection. Let&amp;rsquo;s enhance our sample code a little further:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; ComputerTimeTracker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IStopwatch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Stop();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TimeSpan Elapsed { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ComputerTimeTracker&lt;/span&gt; : IComputerTimeTracker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IStopwatch _stopWatch;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ComputerTimeTracker(IStopwatch stopWatch)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _stopWatch = stopWatch;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StartTracking()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _stopWatch.Start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StopTracking()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _stopWatch.Stop();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TimeSpan GetTimeSpendInFrontOfComputer()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _stopWatch.Elapsed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All I changed is swapping the class dependency &lt;code&gt;Stopwatch&lt;/code&gt; for an interface dependency &lt;code&gt;IStopwatch&lt;/code&gt;. That way the class &lt;code&gt;ComputerTimeTracker&lt;/code&gt;is not depending on the class &lt;code&gt;Stopwatch&lt;/code&gt; of the .NET framework but loosely coupled to any instance that implements the interface &lt;code&gt;IStopwatch&lt;/code&gt;. Now to our biggest benefit:&lt;/p&gt;
&lt;h2 id=&#34;unit-tests&#34;&gt;Unit tests
&lt;/h2&gt;&lt;p&gt;All dependencies we inject into a class via an interface can be &lt;em&gt;mocked&lt;/em&gt;. That is super convenient. Consider the following use case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You start the tracking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You spend 42 hours before the computer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You stop the tracking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You check the spend time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Writing a unit test for that use case is hard when the &lt;code&gt;Stopwatch&lt;/code&gt; instance gets created inside the constructor of &lt;code&gt;ComputerTimeTracker&lt;/code&gt;. You can’t really replace it. And when you can’t replace it you can’t control the &lt;code&gt;Stopwatch&lt;/code&gt; . So you would have to wait real 42 hours. With dependency injection you can simply inject a mocked &lt;code&gt;Stopwatch&lt;/code&gt; into the class, just for the test.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestClass]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ComputerTimeTrackerTests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [TestMethod]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Spend42HoursBeforeTheComputer()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; stopwatch = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;IStopwatch&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stopwatch.Setup(x =&amp;gt; x.Elapsed).Returns(TimeSpan.FromHours(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; systemUnderTest = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ComputerTimeTracker(stopwatch.Object);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        systemUnderTest.StartTracking();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stopwatch.Verify(x =&amp;gt; x.Start(), Times.Once);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        systemUnderTest.StopTracking();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stopwatch.Verify(x =&amp;gt; x.Stop(), Times.Once);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Assert.AreEqual(TimeSpan.FromHours(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;), systemUnderTest.GetTimeSpendInFrontOfComputer());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Dependency injection and inversion of control are important concepts every developer should know. They are a little hyped and often misunderstood. But if you invest some time to really dig into it you see how dumb easy they actually are.&lt;/p&gt;
&lt;p&gt;Why are they so hyped at all? For me, it&amp;rsquo;s simply because they enable me to write readable unit tests for my code. That alone sells it for me.&lt;/p&gt;
&lt;p&gt;But there are more benefits I did not cover here: &lt;em&gt;Dynamic replacement&lt;/em&gt; of dependencies or usage of an &lt;em&gt;IoC-Container&lt;/em&gt;. But these are topics for a separate article…&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Embarrassment-Driven-Testing</title>
        <link>http://localhost:1313/embarrassment-driven-testing/</link>
        <pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/embarrassment-driven-testing/</guid>
        <description>&lt;img src="http://localhost:1313/embarrassment-driven-testing/cover.jpg" alt="Featured image of post Embarrassment-Driven-Testing" /&gt;&lt;h2 id=&#34;a-new-perspective&#34;&gt;A new perspective
&lt;/h2&gt;&lt;p&gt;There are lots of links in my head when thinking about testing in software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a good test suite indicates good software quality&lt;/li&gt;
&lt;li&gt;a good test suite is a safety net for developers&lt;/li&gt;
&lt;li&gt;a good test suite saves time in the long run&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A talk from &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/raneland/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Daniel Raniz Raneland&lt;/a&gt; just added another surprising perspective:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A good test suite prevents you from embarrassment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-one-thing&#34;&gt;The &lt;code&gt;one thing&lt;/code&gt;
&lt;/h2&gt;&lt;p&gt;I think this provides us with valuable insights on the minimun requirements of what to test:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s the &lt;code&gt;one thing&lt;/code&gt; your team/software is responsible for. The &lt;code&gt;one thing&lt;/code&gt; that would be totally embarrassing if it didn&amp;rsquo;t function correctly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;if you develop the software for a snack vending machine, make sure that the doors open correctly.&lt;/li&gt;
&lt;li&gt;if you develop a to-do web app, make sure that to-dos can be ticked&lt;/li&gt;
&lt;li&gt;if you develop a mobile camera app, make sure you can actually take a picture&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the Excel export of your to-do list generates an incorrect file name, users might tolerate it for a while. But if they can&amp;rsquo;t tick their to-dos, they will definitely unsubscribe from your service.&lt;/p&gt;
&lt;p&gt;Ticking to-dos is your &lt;code&gt;one thing&lt;/code&gt;. Make sure to have that covered completely by the test suite. If starting from scratch, this should be one of the first E2E-tests.&lt;/p&gt;
&lt;h2 id=&#34;return-of-investments-of-tests&#34;&gt;Return of Investments of tests
&lt;/h2&gt;&lt;p&gt;I like this idea of embarrassment-driven-testing because it relates so well to another new link I noted from a talk by &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/yohstern/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Johannes Stern&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every single test needs a return of investment (&lt;code&gt;ROI&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You would not invest your valuable money in a project that does not earn you money in the long run, would you? The same is correct for software tests.&lt;/p&gt;
&lt;p&gt;We write unit tests because they are cheap and give us a fast response to our changes. This is an instant &lt;code&gt;ROI&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Integration-, API-, and E2E-tests are more expensive. Depending on the quality of the existing code they can be very expensive. But no matter the price, testing your &lt;code&gt;one thing&lt;/code&gt; is a necessary investment, not just to prevent embarrassment, but to save your business.&lt;/p&gt;
&lt;p&gt;This same thought can also be true from the opposite perspective: Tests can be a bad investment. If your feature is covered by a great E2E-test, do you really need an API-test &lt;em&gt;and&lt;/em&gt; integration-test &lt;em&gt;and&lt;/em&gt; unit-tests? Or are they just redundant?&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t get me wrong, I am an advocate for testing and support every test that is written. But testing is about quality and not quantity. Having the &lt;code&gt;ROI&lt;/code&gt; in mind, maybe it&amp;rsquo;s time to delete those flaky tests that you spend so much time on debugging every week, while not giving you any confidence when they are finally green.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to implement Retries without Cluttering your Code</title>
        <link>http://localhost:1313/how-to-implement-retries-without-cluttering-your-code/</link>
        <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/how-to-implement-retries-without-cluttering-your-code/</guid>
        <description>&lt;img src="http://localhost:1313/how-to-implement-retries-without-cluttering-your-code/cover.jpg" alt="Featured image of post How to implement Retries without Cluttering your Code" /&gt;&lt;h2 id=&#34;imperfection&#34;&gt;Imperfection
&lt;/h2&gt;&lt;p&gt;One important lesson I learned working as a software engineer in the production industry for many years:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some things don’t work on the first try.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The real-world hardware and corresponding drivers I met and worked with always had some quirks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some hardware disconnects from time to time.&lt;/li&gt;
&lt;li&gt;Some drivers throw an exception when commands are executed too fast after each other.&lt;/li&gt;
&lt;li&gt;Some sensors don’t answer your commands at all. Maybe after the third try.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The world is not perfect and everyone makes mistakes. Most of the time, hardware and drivers don’t work as you would expect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;a-naive-solution&#34;&gt;A naive Solution
&lt;/h2&gt;&lt;p&gt;A common solution to avoid these irregular effects, if you cannot fix the root cause, is introducing a retry logic for your action. This often looks similar to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxAmountOfTries = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; currentAmountOfTries = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (currentAmountOfTries &amp;gt; maxAmountOfTries)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        currentAmountOfTries++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        DoSomethingThatCanThrowAnException();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// ignore or log exception&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a great piece of code! It is easy to read, and everyone glimpsing at it knows that this is some retry logic immediately. They could even tweak the number of allowed retries without any deep dive into the code — it’s maintainable, too!&lt;/p&gt;
&lt;p&gt;But as the code base grows, you will find that construct all over the solution. Even worse: always a little different.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most of the time, the variable names differ&lt;/li&gt;
&lt;li&gt;Sometimes the maximum number of tries is set, and sometimes, the maximum number of retries is set.&lt;/li&gt;
&lt;li&gt;Some classes retry on exceptions, some on specific results, some on both.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These repetitions lead to confusion, which results in bugs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t repeat yourself!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-extraction&#34;&gt;The Extraction
&lt;/h2&gt;&lt;p&gt;A smart team, of course, notices this flaw and tries to eliminate it. Let’s extract that retry logic so it can be reused! I saw several solutions for that over the years:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A dedicated service for retrying like &lt;code&gt;IRetryService.Retry(...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;An extension method on &lt;code&gt;Action&lt;/code&gt; or &lt;code&gt;Func&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These solutions worked most of the time. But they required a significant amount of work! Especially if you want to support retries for both sync and async actions. Still, nearly every bigger project contains some functionality like this.&lt;/p&gt;
&lt;h2 id=&#34;party-parrot-to-the-rescue&#34;&gt;Party Parrot to the rescue!
&lt;/h2&gt;&lt;p&gt;There is already an elegant solution to this problem out there! You can use the library &lt;a class=&#34;link&#34; href=&#34;https://github.com/App-vNext/Polly&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Polly&lt;/a&gt; to de-clutter your code. The icon of this library is a colorful parrot. That’s why I can’t resist making bad &lt;a class=&#34;link&#34; href=&#34;https://cultofthepartyparrot.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Party Parrot&lt;/a&gt; jokes about it — Party or Die!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t reinvent the wheel!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is what the upper code looks like when Polly comes into place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RetryPolicy policy = Policy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  .Handle&amp;lt;Exception&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  .Retry(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;policy.Execute(DoSomethingThatCanThrowAnException);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Far less code. In this example, just five lines of code. And it is still clear and precise. That’s a great benefit we have already achieved!&lt;/p&gt;
&lt;p&gt;It gets better. You remember how I said that hardware behaves strangely from time to time? I once met a sensor that returned &lt;code&gt;double.NaN&lt;/code&gt; sometimes. If it did, you just had to let it rest for some seconds and schedule a retry.&lt;/p&gt;
&lt;p&gt;Polly can do that, as well. Here is how I would additionally handle the invalid result and introduce a waiting time between every retry:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RetryPolicy&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt; policy = Policy&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              .Handle&amp;lt;Exception&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              .OrResult(Double.NaN)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              .WaitAndRetry(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, (_, _) =&amp;gt; TimeSpan.FromSeconds(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;policy.Execute(DoSomethingThatCanThrowAnException);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-advantages&#34;&gt;The Advantages
&lt;/h2&gt;&lt;p&gt;Let’s focus on the advantages of using Polly for retries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Great API: Short, precise, and easy to read.&lt;/li&gt;
&lt;li&gt;Polly is widely used and tested. Don’t reinvent a buggy solution.&lt;/li&gt;
&lt;li&gt;You can reuse common policies by sharing them between classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I want to emphasize the API once more. Consider the following method: &lt;code&gt;public double DoSomethingCool(CancellationToken token).&lt;/code&gt; I love that it takes a &lt;code&gt;CancellationToken&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why? Because any user of this method, every client, knows that it supports cancellation! And even better: Every user of this method can decide how they want to handle cancellation. They can cancel with a timeout, cancel when the user clicks some abort button, or cancel however they want.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A great API forces the user to use it correctly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can use the same idea for our retry logic with Polly. Look at the following updated method prototype: &lt;code&gt;public double DoSomethingCool(ISyncPolicy policy, CancellationToken token)&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;I love it! This method seems to support cancellation and execution policies — I know that just by looking at the prototype.&lt;/p&gt;
&lt;p&gt;I can call it in any way I choose! Maybe with five retries on exceptions? Maybe with three retries on &lt;code&gt;double.NaN&lt;/code&gt; with a timeout of two seconds max? It’s up to your clients — your method supports it no matter what they decide. Thanks to Polly and the great API design!&lt;/p&gt;
&lt;p&gt;Definitely check out the &lt;a class=&#34;link&#34; href=&#34;https://github.com/App-vNext/Polly&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;readme&lt;/a&gt; of Polly because it can do so much more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rate-limiting&lt;/li&gt;
&lt;li&gt;timeouts&lt;/li&gt;
&lt;li&gt;caching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Imperative vs. Declarative Models. Explained with Beer</title>
        <link>http://localhost:1313/imperative-vs-declarative/</link>
        <pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/imperative-vs-declarative/</guid>
        <description>&lt;img src="http://localhost:1313/imperative-vs-declarative/cover.jpg" alt="Featured image of post Imperative vs. Declarative Models. Explained with Beer" /&gt;&lt;p&gt;Do you know the difference between an imperative modelling approach and a declarative one? If not, here is a brief explanation with beer.&lt;/p&gt;
&lt;p&gt;When hosting a party in our garage, I need to make sure the fridge is filled with beer. Of course we also organize soft drinks and water, since legend has it that there are people who don&amp;rsquo;t like beer.&lt;/p&gt;
&lt;h2 id=&#34;the-imperative-model&#34;&gt;The Imperative Model
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s say I have space for around 30 bottles in my fridge. I put 15 bottles of beer, 10 bottles of soft drinks and 5 bottles of water in it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perfect! Work done, the party can start!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But 10 minutes into the party, the work continues. The fridge is getting empty and I have to replenish the supply. My desired state of 15/10/5 bottles has already dropped to roughly 6/5/4.&lt;/p&gt;
&lt;p&gt;I need to move more bottles from the beer, soft drink, and water cases to the fridge to keep them cold.&lt;/p&gt;
&lt;p&gt;Phew… that is quite tedious. The work never stops since it&amp;rsquo;s my job to maintain the desired state of 15/10/5 bottles all night long.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why I instructed everyone to refill the fridge from time to time when they see a shortage, by sticking a note on the fridge.&lt;/p&gt;
&lt;p&gt;But chaos soon ensues. We now have very strange fridge-bottle-ratios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either there are too many bottles in the fridge, causing them to roll out and spill all over the floor,&lt;/li&gt;
&lt;li&gt;Or the fridge is full but doesn&amp;rsquo;t contain a single bottle of beer.&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This pretty much sums up how an imperative model works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is the job of moving bottles from the case to the fridge&lt;/li&gt;
&lt;li&gt;This has to be done once before the party&lt;/li&gt;
&lt;li&gt;The bottle count has to be checked regularly&lt;/li&gt;
&lt;li&gt;The job of restocking the fridge needs to be done repeatedly&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The imperative model focuses on the actions that need to be done in order to set the system up and keep it running.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-declarative-model&#34;&gt;The Declarative Model
&lt;/h2&gt;&lt;p&gt;I learned from my mistakes! I don&amp;rsquo;t want to go to bed at 9pm because I&amp;rsquo;m exhausted from all the work. So, we hired a bartender.&lt;/p&gt;
&lt;p&gt;We told the bartender our desired state of 15/10/5 bottles, and he handles the rest for us.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;He sets up the fridge initially,&lt;/li&gt;
&lt;li&gt;He checks the ratio regularly,&lt;/li&gt;
&lt;li&gt;He refills the fridge as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In essence, he performs all the jobs I had to do. I can enjoy the party without worry.&lt;/p&gt;
&lt;p&gt;So from my perspective, the following happened:&lt;/p&gt;
&lt;p&gt;Instead of focusing on the actions that need to be done, I simply defined the desired end-state and delegated the responsibility of achieving that state to the bartender. I don&amp;rsquo;t even care &lt;strong&gt;how&lt;/strong&gt; he does his job, as long as he guarantees that the fridge is always filled as I requested.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The declarative model focuses on the desired state while delegating the responsibility of the necessary actions to achieve that state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;why-beer&#34;&gt;Why beer?
&lt;/h2&gt;&lt;p&gt;There might be better examples like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting the room temperature on a thermostat vs. switching a heater on and off all the time depending on the current temperature&lt;/li&gt;
&lt;li&gt;Asking a cook to provide a buffet for 20 people vs. giving the cook atomic instructions on what to buy, how to cut the ingredients, how to season, …&lt;/li&gt;
&lt;li&gt;Kubernetes: Scaling pods on load changes&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I like beer. So I chose this example. Deal with it.&lt;/p&gt;
&lt;p&gt;I learned these concepts while reading &lt;a class=&#34;link&#34; href=&#34;https://amzn.to/3LyFNOS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Kubernetes Book by Nigel Poulton&lt;/a&gt;. It&amp;rsquo;s really well written, and I recommend it to anyone who needs a deep dive into Kubernetes.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Beyond the Dogma: An unpopular opinion on Clean Code</title>
        <link>http://localhost:1313/beyond-the-dogma-an-unpopular-opinion-on-clean-code/</link>
        <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/beyond-the-dogma-an-unpopular-opinion-on-clean-code/</guid>
        <description>&lt;img src="http://localhost:1313/beyond-the-dogma-an-unpopular-opinion-on-clean-code/cover.jpg" alt="Featured image of post Beyond the Dogma: An unpopular opinion on Clean Code" /&gt;&lt;h2 id=&#34;an-uplifting-read&#34;&gt;An uplifting read
&lt;/h2&gt;&lt;p&gt;Part of being a good developer is reading books and pursuing lifelong learning. One of the books that greatly influenced me as a young professional was &lt;a class=&#34;link&#34; href=&#34;https://amzn.to/3XZ8j3J&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;“Clean Code” by Robert C. Martin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The best part? It’s an uplifting read. Even with limited software knowledge, you can easily grasp Martin’s concepts. I remember sitting on the train, reading with a smile on my face, and nodding in agreement throughout.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Martin is spot on! “Clean Code” is the real deal!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-hardliner&#34;&gt;The Hardliner
&lt;/h2&gt;&lt;p&gt;That’s when my “Clean Code” phase began. I treated all of Martin’s principles as established facts; a guidebook that all good developers must adhere to. I became rather dogmatic, sometimes blindly applying Martin’s suggestions.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DRY&lt;/code&gt; (Don’t Repeat Yourself) — one of the key tenets of Clean Code. I internalized Martin’s ideas and shared them with my colleagues like a prophet. If I noticed something duplicated three times, I’d get nervous and immediately address it through extraction.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Extract ’til you drop!” — Martin’s mantra.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;coming-of-age&#34;&gt;Coming of Age
&lt;/h2&gt;&lt;p&gt;Becoming a Senior Developer required me to question Martin’s principles. Don’t get me wrong, Martin is still correct and “Clean Code” remains essential. However, blindly adopting all his rules is a mistake. Ponder them; some rules even contradict each other. &lt;code&gt;DRY&lt;/code&gt; can lead to complex architectures that breach the &lt;code&gt;KISS&lt;/code&gt; (Keep It Simple, Stupid!) principle. It can also lead to disregarding &lt;code&gt;YAGNI&lt;/code&gt; (You Ain’t Gonna Need It).&lt;/p&gt;
&lt;p&gt;I’ve come to realize that 6 lines of duplicated code are often cleaner than, for instance, implementing an observer pattern. With those 6 lines, I can instantly understand the code, without having to navigate through multiple classes and interfaces. If those 6 lines turn into 7 lines in 5 years, so be it. It’s an acceptable growth.&lt;/p&gt;
&lt;p&gt;If you find yourself with 12 lines of duplicated code growing every month, it’s a sign that refactoring should be scheduled.&lt;/p&gt;
&lt;h2 id=&#34;some-advice&#34;&gt;Some Advice
&lt;/h2&gt;&lt;p&gt;I believe every dedicated developer experiences a dogmatic Clean Code phase, so I won’t advise you to skip it. But keep it brief by critically evaluating Martin’s rules and adopting them only when they truly fit!&lt;/p&gt;
&lt;p&gt;Another rule I always remember:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The developer who has to debug your code is a serial killer who knows where you live!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Will you offer them 6 lines of code adding items to a list, or will you guide him through the Visitor Pattern to gather those 6 items?&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How and Where to handle Exceptions while Maintaining a Great API</title>
        <link>http://localhost:1313/how-and-where-to-handle-exceptions-while-maintaining-a-great-api/</link>
        <pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/how-and-where-to-handle-exceptions-while-maintaining-a-great-api/</guid>
        <description>&lt;img src="http://localhost:1313/how-and-where-to-handle-exceptions-while-maintaining-a-great-api/cover.jpg" alt="Featured image of post How and Where to handle Exceptions while Maintaining a Great API" /&gt;&lt;p&gt;Exception handling is not easy. It can be done in the wrong places, it can be done the wrong way, and it can even be forgotten completely.&lt;/p&gt;
&lt;p&gt;The best we can do to help our fellow developers with that problem is to design our API as bulletproof as possible.&lt;/p&gt;
&lt;p&gt;An exception-less approach via the Result Pattern is a step in that direction.&lt;/p&gt;
&lt;p&gt;In this article, I will guide you through a typical software problem I faced multiple times working in the production industry. I will provide some simple examples, share my thoughts, and explain why I prefer the exception-less approach in this use case.&lt;/p&gt;
&lt;h2 id=&#34;the-manufacturers-dll&#34;&gt;The Manufacturer’s DLL
&lt;/h2&gt;&lt;p&gt;I often have to deal with actual hardware at my job.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Opening/Closing valves&lt;/li&gt;
&lt;li&gt;Switching relais&lt;/li&gt;
&lt;li&gt;Retrieving values from temperature sensors&lt;/li&gt;
&lt;li&gt;Moving actuators&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these expensive hardwares gets shipped with a piece of software in form of a DLL from the manufacturer.&lt;/p&gt;
&lt;p&gt;Let’s say we want to measure the ambient pressure and bought some expensive pressure sensor. The manufacturer provided us with a driver that has the following features:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IPressureSensorDriver&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StartMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StopMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As for most manufacturer DLLs the API is not very convenient. To actually poll the current ambient pressure we have to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call &lt;code&gt;Init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;StartMeasurement()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;StopMeasurement()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;GetPressure()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dont-repeat-yourself&#34;&gt;Don’t repeat yourself!
&lt;/h2&gt;&lt;p&gt;Since we don’t want calls repeated all over our solution we will introduce a new class that wraps the manufacturer&amp;rsquo;s driver and acts as a convenient service for us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PressureService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IPressureSensorDriver _driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PressureService(IPressureSensorDriver driver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver = driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; GetPressure()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver.Init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver.StartMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver.StopMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; pressure = _driver.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pressure;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s test our service by polling the pressure multiple times in a row:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; Task Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; driver = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PressureSensorDriver();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; pressureService = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PressureService(driver);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; pressure = pressureService.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Pressure: {pressure}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; Task.Delay(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And of course: As soon as we run the application we’ll get an unhandled exception:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception Unhandled — System.Exception: ‘Connection to Sensor interrupted.’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;what-did-we-do-wrong&#34;&gt;What did we do wrong?
&lt;/h2&gt;&lt;p&gt;We just called a method from another application layer without any exception handling.&lt;/p&gt;
&lt;p&gt;The driver class is a third-party code we do not know. Nevertheless we crossed that border without any safety net. We just assumed that the method will work as expected.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always handle exceptions on application borders!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardware calls no matter the communication protocol&lt;/li&gt;
&lt;li&gt;Web Requests or anything that depends on the internet&lt;/li&gt;
&lt;li&gt;External code, either unknown, undocumented or untested&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-classic-solution&#34;&gt;The Classic Solution
&lt;/h2&gt;&lt;p&gt;Since we already found the problem, let’s implement the classic solution for it: a try-catch right in our service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PressureService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IPressureSensorDriver _driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PressureService(IPressureSensorDriver driver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver = driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; GetPressure()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.Init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StartMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StopMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; pressure = _driver.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pressure;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;.NaN;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That, of course, will work. All exceptions will be swallowed by our &lt;code&gt;catch&lt;/code&gt;. If something goes wrong, we simply return a &lt;code&gt;double.NaN&lt;/code&gt; . We are now exception-less!&lt;/p&gt;
&lt;p&gt;But there are some flaws. Let’s look at the API of our service from a user’s view. And with API I simply mean our method &lt;code&gt;GetPressure()&lt;/code&gt;; its name, its return type and its input arguments. Because that is all the user sees.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user has no way to know whether the method throws an exception or not. He has no way to decide whether he has to put that method call in a &lt;code&gt;try/catch&lt;/code&gt; without looking into it. That sucks.&lt;/li&gt;
&lt;li&gt;The user has no way to know whether the method was a success or not. Even when the method ran without an exception, he has to check whether he got a valid number or &lt;code&gt;double.NaN&lt;/code&gt;. That sucks, as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-try-pattern&#34;&gt;The Try Pattern
&lt;/h2&gt;&lt;p&gt;Let’s tweak our service a little further to see if we can get rid of these flaws:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PressureService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IPressureSensorDriver _driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PressureService(IPressureSensorDriver driver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver = driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; TryGetPressure(&lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; pressure)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.Init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StartMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StopMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            pressure = _driver.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            pressure = Double.NaN;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our method now returns the pressure via an out variable. The return value of the method now is a &lt;code&gt;bool&lt;/code&gt; indicating success or failure of the method. We also tweaked the name of our method from &lt;code&gt;GetPressure&lt;/code&gt; to &lt;code&gt;TryGetPressure&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We just implemented the Try Pattern.&lt;/p&gt;
&lt;h2 id=&#34;what-have-we-won-that-way&#34;&gt;What have we won that way?
&lt;/h2&gt;&lt;p&gt;Method names starting with &lt;code&gt;Try&lt;/code&gt; are exception-less! That is the most important part of the Try Pattern.&lt;/p&gt;
&lt;p&gt;Just by reading the method’s name the user of our service already knows that he does not need to handle any exceptions when calling it. This sounds so trivial but is a big part of API design:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you let the user know what to expect, he will do it the correct way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The other flaw was eliminated, as well: The user can simply check the returned &lt;code&gt;bool&lt;/code&gt; flag to see if the method call was a success or not. He does not need to look at the pressure value at all, when the method already returned &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But in my opinion there are some new flaws:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I don’t like the syntax of out variables. A lot of Clean Code Prophets would sign that immediately. It’s just confusing — everyone expects the outputs of the method left to its name and suddenly there is in output right between the inputs? Just because we can, does not mean we should. Don’t obfuscate your code with all the syntax sugar your language provides. Keep it Simple!&lt;/li&gt;
&lt;li&gt;We only have a single, binary result. But most of the time we want to provide the user of our method with more information. Consider all the reasons our method could fail: The service could not connect to the sensor? The service was connected to the sensor but the connection was lost? The sensor returned a value but it is not plausible? There might be different ways the user wants to handle each of these situations. In some he might schedule a retry, in others he might simply show a descriptive error message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-result-pattern&#34;&gt;The Result Pattern
&lt;/h2&gt;&lt;p&gt;To even solve these flaws, let’s tweak our service even a little further:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PressureService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IPressureSensorDriver _driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PressureService(IPressureSensorDriver driver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver = driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Result&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt; GetPressure()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.Init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StartMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StopMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            pressure = _driver.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pressure &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Result.Fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pressure is not plausible.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Result.Ok(pressure);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Result.Fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not retrieve Pressure from Sensor.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this version we don’t return a &lt;code&gt;bool&lt;/code&gt; but a full &lt;code&gt;object&lt;/code&gt; of type &lt;code&gt;Result&amp;lt;double&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before digging deeper into the type &lt;code&gt;Result&lt;/code&gt;, have a look at the new usage of our service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; Task Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; driver = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PressureSensorDriver();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; pressureService = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PressureService(driver);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Result&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt; pressure = pressureService.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pressure.IsFailed)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        HandleErrorWhileRetrievingPressure(pressure.Errors);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Pressure: {pressure}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you review the API and its usage you will notice:&lt;/p&gt;
&lt;p&gt;You do not retrieve a &lt;code&gt;double&lt;/code&gt; but a &lt;code&gt;Result&amp;lt;double&amp;gt;&lt;/code&gt;. You are forced to think about what you will do if the operation failed. Just by using &lt;code&gt;Result&amp;lt;double&amp;gt;&lt;/code&gt; you know that there could be problems. You wouldn’t have noticed that if I just threw an exception inside the method, would you? And that is the big benefit of the Result Pattern.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A good API forces the user to use it correctly! It makes it nearly impossible to forget about error handling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-result-object&#34;&gt;The Result Object
&lt;/h2&gt;&lt;p&gt;The result object simply contains the actual value you are interested in plus any additional information you need — error reasons, success reasons, helper methods like &lt;code&gt;IsFailed&lt;/code&gt; — be creative!&lt;/p&gt;
&lt;p&gt;This pattern is not new; it’s a classic. There are many libraries for the Result Pattern available, so you don’t even have to implement your own &lt;code&gt;Result&lt;/code&gt; class!&lt;/p&gt;
&lt;p&gt;My .NET example used the great project &lt;a class=&#34;link&#34; href=&#34;https://github.com/altmann/FluentResults&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FluentResults&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Just to digest, I will repeat my introduction:&lt;/p&gt;
&lt;p&gt;Exception handling is not easy. It can be done in the wrong places, it can be done the wrong way, and it can even be forgotten completely.&lt;/p&gt;
&lt;p&gt;The best we can do to help our fellow developers with that problem is to design our API as bulletproof as possible.&lt;/p&gt;
&lt;p&gt;An exception-less approach via the Result Pattern is a step in that direction.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
