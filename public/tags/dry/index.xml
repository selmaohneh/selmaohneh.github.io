<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Dry on Cello&#39;s Blog</title>
        <link>http://localhost:1313/tags/dry/</link>
        <description>Recent content in Dry on Cello&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 24 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/dry/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>How to implement Retries without Cluttering your Code</title>
        <link>http://localhost:1313/how-to-implement-retries-without-cluttering-your-code/</link>
        <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/how-to-implement-retries-without-cluttering-your-code/</guid>
        <description>&lt;img src="http://localhost:1313/how-to-implement-retries-without-cluttering-your-code/cover.jpg" alt="Featured image of post How to implement Retries without Cluttering your Code" /&gt;&lt;h2 id=&#34;imperfection&#34;&gt;Imperfection
&lt;/h2&gt;&lt;p&gt;One important lesson I learned working as a software engineer in the production industry for many years:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some things don’t work on the first try.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The real-world hardware and corresponding drivers I met and worked with always had some quirks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some hardware disconnects from time to time.&lt;/li&gt;
&lt;li&gt;Some drivers throw an exception when commands are executed too fast after each other.&lt;/li&gt;
&lt;li&gt;Some sensors don’t answer your commands at all. Maybe after the third try.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The world is not perfect and everyone makes mistakes. Most of the time, hardware and drivers don’t work as you would expect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;a-naive-solution&#34;&gt;A naive Solution
&lt;/h2&gt;&lt;p&gt;A common solution to avoid these irregular effects, if you cannot fix the root cause, is introducing a retry logic for your action. This often looks similar to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxAmountOfTries = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; currentAmountOfTries = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (currentAmountOfTries &amp;gt; maxAmountOfTries)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        currentAmountOfTries++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        DoSomethingThatCanThrowAnException();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// ignore or log exception&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a great piece of code! It is easy to read, and everyone glimpsing at it knows that this is some retry logic immediately. They could even tweak the number of allowed retries without any deep dive into the code — it’s maintainable, too!&lt;/p&gt;
&lt;p&gt;But as the code base grows, you will find that construct all over the solution. Even worse: always a little different.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most of the time, the variable names differ&lt;/li&gt;
&lt;li&gt;Sometimes the maximum number of tries is set, and sometimes, the maximum number of retries is set.&lt;/li&gt;
&lt;li&gt;Some classes retry on exceptions, some on specific results, some on both.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These repetitions lead to confusion, which results in bugs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t repeat yourself!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-extraction&#34;&gt;The Extraction
&lt;/h2&gt;&lt;p&gt;A smart team, of course, notices this flaw and tries to eliminate it. Let’s extract that retry logic so it can be reused! I saw several solutions for that over the years:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A dedicated service for retrying like &lt;code&gt;IRetryService.Retry(...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;An extension method on &lt;code&gt;Action&lt;/code&gt; or &lt;code&gt;Func&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These solutions worked most of the time. But they required a significant amount of work! Especially if you want to support retries for both sync and async actions. Still, nearly every bigger project contains some functionality like this.&lt;/p&gt;
&lt;h2 id=&#34;party-parrot-to-the-rescue&#34;&gt;Party Parrot to the rescue!
&lt;/h2&gt;&lt;p&gt;There is already an elegant solution to this problem out there! You can use the library &lt;a class=&#34;link&#34; href=&#34;https://github.com/App-vNext/Polly&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Polly&lt;/a&gt; to de-clutter your code. The icon of this library is a colorful parrot. That’s why I can’t resist making bad &lt;a class=&#34;link&#34; href=&#34;https://cultofthepartyparrot.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Party Parrot&lt;/a&gt; jokes about it — Party or Die!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t reinvent the wheel!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is what the upper code looks like when Polly comes into place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RetryPolicy policy = Policy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  .Handle&amp;lt;Exception&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  .Retry(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;policy.Execute(DoSomethingThatCanThrowAnException);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Far less code. In this example, just five lines of code. And it is still clear and precise. That’s a great benefit we have already achieved!&lt;/p&gt;
&lt;p&gt;It gets better. You remember how I said that hardware behaves strangely from time to time? I once met a sensor that returned &lt;code&gt;double.NaN&lt;/code&gt; sometimes. If it did, you just had to let it rest for some seconds and schedule a retry.&lt;/p&gt;
&lt;p&gt;Polly can do that, as well. Here is how I would additionally handle the invalid result and introduce a waiting time between every retry:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RetryPolicy&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt; policy = Policy&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              .Handle&amp;lt;Exception&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              .OrResult(Double.NaN)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              .WaitAndRetry(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, (_, _) =&amp;gt; TimeSpan.FromSeconds(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;policy.Execute(DoSomethingThatCanThrowAnException);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-advantages&#34;&gt;The Advantages
&lt;/h2&gt;&lt;p&gt;Let’s focus on the advantages of using Polly for retries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Great API: Short, precise, and easy to read.&lt;/li&gt;
&lt;li&gt;Polly is widely used and tested. Don’t reinvent a buggy solution.&lt;/li&gt;
&lt;li&gt;You can reuse common policies by sharing them between classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I want to emphasize the API once more. Consider the following method: &lt;code&gt;public double DoSomethingCool(CancellationToken token).&lt;/code&gt; I love that it takes a &lt;code&gt;CancellationToken&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why? Because any user of this method, every client, knows that it supports cancellation! And even better: Every user of this method can decide how they want to handle cancellation. They can cancel with a timeout, cancel when the user clicks some abort button, or cancel however they want.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A great API forces the user to use it correctly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can use the same idea for our retry logic with Polly. Look at the following updated method prototype: &lt;code&gt;public double DoSomethingCool(ISyncPolicy policy, CancellationToken token)&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;I love it! This method seems to support cancellation and execution policies — I know that just by looking at the prototype.&lt;/p&gt;
&lt;p&gt;I can call it in any way I choose! Maybe with five retries on exceptions? Maybe with three retries on &lt;code&gt;double.NaN&lt;/code&gt; with a timeout of two seconds max? It’s up to your clients — your method supports it no matter what they decide. Thanks to Polly and the great API design!&lt;/p&gt;
&lt;p&gt;Definitely check out the &lt;a class=&#34;link&#34; href=&#34;https://github.com/App-vNext/Polly&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;readme&lt;/a&gt; of Polly because it can do so much more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rate-limiting&lt;/li&gt;
&lt;li&gt;timeouts&lt;/li&gt;
&lt;li&gt;caching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Beyond the Dogma: An unpopular opinion on Clean Code</title>
        <link>http://localhost:1313/beyond-the-dogma-an-unpopular-opinion-on-clean-code/</link>
        <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/beyond-the-dogma-an-unpopular-opinion-on-clean-code/</guid>
        <description>&lt;img src="http://localhost:1313/beyond-the-dogma-an-unpopular-opinion-on-clean-code/cover.jpg" alt="Featured image of post Beyond the Dogma: An unpopular opinion on Clean Code" /&gt;&lt;h2 id=&#34;an-uplifting-read&#34;&gt;An uplifting read
&lt;/h2&gt;&lt;p&gt;Part of being a good developer is reading books and pursuing lifelong learning. One of the books that greatly influenced me as a young professional was &lt;a class=&#34;link&#34; href=&#34;https://amzn.to/3XZ8j3J&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;“Clean Code” by Robert C. Martin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The best part? It’s an uplifting read. Even with limited software knowledge, you can easily grasp Martin’s concepts. I remember sitting on the train, reading with a smile on my face, and nodding in agreement throughout.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Martin is spot on! “Clean Code” is the real deal!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-hardliner&#34;&gt;The Hardliner
&lt;/h2&gt;&lt;p&gt;That’s when my “Clean Code” phase began. I treated all of Martin’s principles as established facts; a guidebook that all good developers must adhere to. I became rather dogmatic, sometimes blindly applying Martin’s suggestions.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DRY&lt;/code&gt; (Don’t Repeat Yourself) — one of the key tenets of Clean Code. I internalized Martin’s ideas and shared them with my colleagues like a prophet. If I noticed something duplicated three times, I’d get nervous and immediately address it through extraction.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Extract ’til you drop!” — Martin’s mantra.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;coming-of-age&#34;&gt;Coming of Age
&lt;/h2&gt;&lt;p&gt;Becoming a Senior Developer required me to question Martin’s principles. Don’t get me wrong, Martin is still correct and “Clean Code” remains essential. However, blindly adopting all his rules is a mistake. Ponder them; some rules even contradict each other. &lt;code&gt;DRY&lt;/code&gt; can lead to complex architectures that breach the &lt;code&gt;KISS&lt;/code&gt; (Keep It Simple, Stupid!) principle. It can also lead to disregarding &lt;code&gt;YAGNI&lt;/code&gt; (You Ain’t Gonna Need It).&lt;/p&gt;
&lt;p&gt;I’ve come to realize that 6 lines of duplicated code are often cleaner than, for instance, implementing an observer pattern. With those 6 lines, I can instantly understand the code, without having to navigate through multiple classes and interfaces. If those 6 lines turn into 7 lines in 5 years, so be it. It’s an acceptable growth.&lt;/p&gt;
&lt;p&gt;If you find yourself with 12 lines of duplicated code growing every month, it’s a sign that refactoring should be scheduled.&lt;/p&gt;
&lt;h2 id=&#34;some-advice&#34;&gt;Some Advice
&lt;/h2&gt;&lt;p&gt;I believe every dedicated developer experiences a dogmatic Clean Code phase, so I won’t advise you to skip it. But keep it brief by critically evaluating Martin’s rules and adopting them only when they truly fit!&lt;/p&gt;
&lt;p&gt;Another rule I always remember:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The developer who has to debug your code is a serial killer who knows where you live!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Will you offer them 6 lines of code adding items to a list, or will you guide him through the Visitor Pattern to gather those 6 items?&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How and Where to handle Exceptions while Maintaining a Great API</title>
        <link>http://localhost:1313/how-and-where-to-handle-exceptions-while-maintaining-a-great-api/</link>
        <pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/how-and-where-to-handle-exceptions-while-maintaining-a-great-api/</guid>
        <description>&lt;img src="http://localhost:1313/how-and-where-to-handle-exceptions-while-maintaining-a-great-api/cover.jpg" alt="Featured image of post How and Where to handle Exceptions while Maintaining a Great API" /&gt;&lt;p&gt;Exception handling is not easy. It can be done in the wrong places, it can be done the wrong way, and it can even be forgotten completely.&lt;/p&gt;
&lt;p&gt;The best we can do to help our fellow developers with that problem is to design our API as bulletproof as possible.&lt;/p&gt;
&lt;p&gt;An exception-less approach via the Result Pattern is a step in that direction.&lt;/p&gt;
&lt;p&gt;In this article, I will guide you through a typical software problem I faced multiple times working in the production industry. I will provide some simple examples, share my thoughts, and explain why I prefer the exception-less approach in this use case.&lt;/p&gt;
&lt;h2 id=&#34;the-manufacturers-dll&#34;&gt;The Manufacturer’s DLL
&lt;/h2&gt;&lt;p&gt;I often have to deal with actual hardware at my job.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Opening/Closing valves&lt;/li&gt;
&lt;li&gt;Switching relais&lt;/li&gt;
&lt;li&gt;Retrieving values from temperature sensors&lt;/li&gt;
&lt;li&gt;Moving actuators&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these expensive hardwares gets shipped with a piece of software in form of a DLL from the manufacturer.&lt;/p&gt;
&lt;p&gt;Let’s say we want to measure the ambient pressure and bought some expensive pressure sensor. The manufacturer provided us with a driver that has the following features:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IPressureSensorDriver&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StartMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; StopMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As for most manufacturer DLLs the API is not very convenient. To actually poll the current ambient pressure we have to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call &lt;code&gt;Init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;StartMeasurement()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;StopMeasurement()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;GetPressure()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dont-repeat-yourself&#34;&gt;Don’t repeat yourself!
&lt;/h2&gt;&lt;p&gt;Since we don’t want calls repeated all over our solution we will introduce a new class that wraps the manufacturer&amp;rsquo;s driver and acts as a convenient service for us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PressureService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IPressureSensorDriver _driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PressureService(IPressureSensorDriver driver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver = driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; GetPressure()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver.Init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver.StartMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver.StopMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; pressure = _driver.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pressure;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s test our service by polling the pressure multiple times in a row:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; Task Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; driver = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PressureSensorDriver();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; pressureService = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PressureService(driver);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; pressure = pressureService.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Pressure: {pressure}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; Task.Delay(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And of course: As soon as we run the application we’ll get an unhandled exception:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception Unhandled — System.Exception: ‘Connection to Sensor interrupted.’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;what-did-we-do-wrong&#34;&gt;What did we do wrong?
&lt;/h2&gt;&lt;p&gt;We just called a method from another application layer without any exception handling.&lt;/p&gt;
&lt;p&gt;The driver class is a third-party code we do not know. Nevertheless we crossed that border without any safety net. We just assumed that the method will work as expected.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always handle exceptions on application borders!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardware calls no matter the communication protocol&lt;/li&gt;
&lt;li&gt;Web Requests or anything that depends on the internet&lt;/li&gt;
&lt;li&gt;External code, either unknown, undocumented or untested&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-classic-solution&#34;&gt;The Classic Solution
&lt;/h2&gt;&lt;p&gt;Since we already found the problem, let’s implement the classic solution for it: a try-catch right in our service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PressureService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IPressureSensorDriver _driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PressureService(IPressureSensorDriver driver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver = driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; GetPressure()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.Init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StartMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StopMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; pressure = _driver.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pressure;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;.NaN;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That, of course, will work. All exceptions will be swallowed by our &lt;code&gt;catch&lt;/code&gt;. If something goes wrong, we simply return a &lt;code&gt;double.NaN&lt;/code&gt; . We are now exception-less!&lt;/p&gt;
&lt;p&gt;But there are some flaws. Let’s look at the API of our service from a user’s view. And with API I simply mean our method &lt;code&gt;GetPressure()&lt;/code&gt;; its name, its return type and its input arguments. Because that is all the user sees.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user has no way to know whether the method throws an exception or not. He has no way to decide whether he has to put that method call in a &lt;code&gt;try/catch&lt;/code&gt; without looking into it. That sucks.&lt;/li&gt;
&lt;li&gt;The user has no way to know whether the method was a success or not. Even when the method ran without an exception, he has to check whether he got a valid number or &lt;code&gt;double.NaN&lt;/code&gt;. That sucks, as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-try-pattern&#34;&gt;The Try Pattern
&lt;/h2&gt;&lt;p&gt;Let’s tweak our service a little further to see if we can get rid of these flaws:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PressureService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IPressureSensorDriver _driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PressureService(IPressureSensorDriver driver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver = driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; TryGetPressure(&lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; pressure)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.Init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StartMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StopMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            pressure = _driver.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            pressure = Double.NaN;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our method now returns the pressure via an out variable. The return value of the method now is a &lt;code&gt;bool&lt;/code&gt; indicating success or failure of the method. We also tweaked the name of our method from &lt;code&gt;GetPressure&lt;/code&gt; to &lt;code&gt;TryGetPressure&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We just implemented the Try Pattern.&lt;/p&gt;
&lt;h2 id=&#34;what-have-we-won-that-way&#34;&gt;What have we won that way?
&lt;/h2&gt;&lt;p&gt;Method names starting with &lt;code&gt;Try&lt;/code&gt; are exception-less! That is the most important part of the Try Pattern.&lt;/p&gt;
&lt;p&gt;Just by reading the method’s name the user of our service already knows that he does not need to handle any exceptions when calling it. This sounds so trivial but is a big part of API design:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you let the user know what to expect, he will do it the correct way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The other flaw was eliminated, as well: The user can simply check the returned &lt;code&gt;bool&lt;/code&gt; flag to see if the method call was a success or not. He does not need to look at the pressure value at all, when the method already returned &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But in my opinion there are some new flaws:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I don’t like the syntax of out variables. A lot of Clean Code Prophets would sign that immediately. It’s just confusing — everyone expects the outputs of the method left to its name and suddenly there is in output right between the inputs? Just because we can, does not mean we should. Don’t obfuscate your code with all the syntax sugar your language provides. Keep it Simple!&lt;/li&gt;
&lt;li&gt;We only have a single, binary result. But most of the time we want to provide the user of our method with more information. Consider all the reasons our method could fail: The service could not connect to the sensor? The service was connected to the sensor but the connection was lost? The sensor returned a value but it is not plausible? There might be different ways the user wants to handle each of these situations. In some he might schedule a retry, in others he might simply show a descriptive error message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-result-pattern&#34;&gt;The Result Pattern
&lt;/h2&gt;&lt;p&gt;To even solve these flaws, let’s tweak our service even a little further:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PressureService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IPressureSensorDriver _driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PressureService(IPressureSensorDriver driver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _driver = driver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Result&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt; GetPressure()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.Init();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StartMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _driver.StopMeasurement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            pressure = _driver.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pressure &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Result.Fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pressure is not plausible.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Result.Ok(pressure);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Result.Fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not retrieve Pressure from Sensor.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this version we don’t return a &lt;code&gt;bool&lt;/code&gt; but a full &lt;code&gt;object&lt;/code&gt; of type &lt;code&gt;Result&amp;lt;double&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before digging deeper into the type &lt;code&gt;Result&lt;/code&gt;, have a look at the new usage of our service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; Task Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; driver = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PressureSensorDriver();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; pressureService = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PressureService(driver);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Result&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt; pressure = pressureService.GetPressure();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pressure.IsFailed)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        HandleErrorWhileRetrievingPressure(pressure.Errors);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Pressure: {pressure}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.ReadKey();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you review the API and its usage you will notice:&lt;/p&gt;
&lt;p&gt;You do not retrieve a &lt;code&gt;double&lt;/code&gt; but a &lt;code&gt;Result&amp;lt;double&amp;gt;&lt;/code&gt;. You are forced to think about what you will do if the operation failed. Just by using &lt;code&gt;Result&amp;lt;double&amp;gt;&lt;/code&gt; you know that there could be problems. You wouldn’t have noticed that if I just threw an exception inside the method, would you? And that is the big benefit of the Result Pattern.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A good API forces the user to use it correctly! It makes it nearly impossible to forget about error handling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-result-object&#34;&gt;The Result Object
&lt;/h2&gt;&lt;p&gt;The result object simply contains the actual value you are interested in plus any additional information you need — error reasons, success reasons, helper methods like &lt;code&gt;IsFailed&lt;/code&gt; — be creative!&lt;/p&gt;
&lt;p&gt;This pattern is not new; it’s a classic. There are many libraries for the Result Pattern available, so you don’t even have to implement your own &lt;code&gt;Result&lt;/code&gt; class!&lt;/p&gt;
&lt;p&gt;My .NET example used the great project &lt;a class=&#34;link&#34; href=&#34;https://github.com/altmann/FluentResults&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FluentResults&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Just to digest, I will repeat my introduction:&lt;/p&gt;
&lt;p&gt;Exception handling is not easy. It can be done in the wrong places, it can be done the wrong way, and it can even be forgotten completely.&lt;/p&gt;
&lt;p&gt;The best we can do to help our fellow developers with that problem is to design our API as bulletproof as possible.&lt;/p&gt;
&lt;p&gt;An exception-less approach via the Result Pattern is a step in that direction.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
