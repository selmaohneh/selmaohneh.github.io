[{"content":"Everybody knows the famous Toniebox. It\u0026rsquo;s a wonderful device which lets kids start music or an audio book just by putting a little figure on top of it. Every friend of our daughter got one on their second birthday. So the pressure was high.\nMy daughter looked at me with her big eyes — She wants one, as well!\nBut that cute little cube is not cheap. Especially the costs for the Tonie figures stack up fast… 15€ per figure times ten audio books: That\u0026rsquo;s 150 bucks — for audio books that are already available with my Spotify subscription.\nThat\u0026rsquo;s when I heard about and fell in love with the Phoniebox project. Building a DIY Toniebox for my daughter sounded like a really cool gift for her birthday.\nI studied this excellent blog post and managed to build a fancy little box without any prior soldering experience:\nAnd the best part: I was able to add as many audio books as I want without further costs! All content came directly from Spotify.\nMy daughter was happy. I was proud. Success.\nThe Catastrophe\rThen it happened. My wife called me at work:\nThe box is not working. Did you tinker around again?\nI did nothing. But Spotify did. The library libspotify got discontinued. A library the Phoniebox project heavily relied on. From one day to the next, thousands of Phonieboxes in the Spotify version stopped working.\nMy daughter was sad, even cried a little. I guess she was not the only one. I promised myself that this will not happen again!\nThat\u0026rsquo;s why I built my own music box. A music box powered by Home Assistant. A music box I have full control over.\nStep 1: The tag reader\rMy box will need to register NFC cards. So I have to include an NFC reader. The Home Assistant tags documentation references a cool project on Github for a standalone tag reader.\nExactly what I needed! All material needed are a wemos D1 mini, a NFC reader and a buzzer. That\u0026rsquo;s it.\nI ditched the LED since I don\u0026rsquo;t wanted to integrate one in my box. Following the readme I was able to solder everything together and flash the firmware on the wemos D1 mini.\nStep 2: Buttons\rThe Home Assistant docs really have a lot of information about the tags feature. Especially the chapter Building an RFID jukebox is nearly all I wanted.\nBut I want to have actual physical buttons. My daughter needs some buttons for play, pause, next, previous, volume up/down. So I bought some.\nStep 3: Building the box\rI bought a small bambus box from IKEA. I drilled some holes in it with these guys. Then I attached everything into the box with some hot glue.\nI really learned a lot this time. This was the first time I soldered screw mounts on the board. The benefit, in contrast to hard-soldering the cables to the board, is that you are able to detach them if needed. This comes in really handy if you need to debug something.\nI also used cable end crimps for the first time. No more wire fibers! And they can be easily attached into the screw mounts.\nThis was the first time I am actually proud of my cable management — although I guess any professional would puke looking at this. If so, please give me some tips! I\u0026rsquo;m eager to learn. Thanks!\nThe whole box is powered by a 5V power supply. The ESP gets powered directly over its 5V pin. Don\u0026rsquo;t use the usb port for powering. I ran into all kind of issues like the NFC reader not working.\nI integrated a coaxial power connector into the box, and it works like a charm. However, make sure you buy a connector that matches the size of your power supply. If they don\u0026rsquo;t match, you will have a loose connection. There are two or three common sizes — just check the datasheets once and you should be fine.\nStep 4: Tweaking the firmware to support the buttons\rTo add the different buttons to the firmware and Home Assistant I had to add some binary_sensors to the ESPHome yml file of my music box.\nbinary_sensor: - platform: gpio name: \u0026#34;liasbox_playplause\u0026#34; pin: number: D4 inverted: true mode: input: true pullup: true filters: - delayed_off: 10ms - platform: gpio name: \u0026#34;liasbox_next\u0026#34; pin: number: TX inverted: true mode: input: true pullup: true filters: - delayed_off: 10ms - platform: gpio name: \u0026#34;liasbox_previous\u0026#34; pin: number: D3 inverted: true mode: input: true pullup: true filters: - delayed_off: 10ms - platform: gpio name: \u0026#34;liasbox_volume_down\u0026#34; pin: number: D5 inverted: true mode: input: true pullup: true filters: - delayed_off: 10ms - platform: gpio name: \u0026#34;liasbox_volume_up\u0026#34; pin: number: D6 inverted: true mode: input: true pullup: true filters: - delayed_off: 10ms wifi: ssid: !secret wifi_ssid password: !secret wifi_password substitutions: name: \u0026#34;liasbox\u0026#34; packages: adonno.tag_reader: github://adonno/tagreader/tagreader.yaml esphome: name: ${name} name_add_mac_suffix: false Now I have all buttons available as entities in Home Assistant, yay!\nStep 5: Let the buttons execute automations\rPlay/Pause, next, previous and volume up/down are all standard services of media_player entities. So all I had to do was trigger all those services when a button gets pressed. Here is an example for skipping to the next song: I made similar automations for the other buttons, as well.\nAs you can see I capsuled the media player I want to use for my box as a helper entity. I did this because currently the music will start on our Sonos bar in the living room. That\u0026rsquo;s where the box is located. But in a few years the box will move to my daughter\u0026rsquo;s room. She will get her own little Sonos box (maybe the next good birthday present!?). And then I will be able to switch the media player very fast without needing to adjust all automations.\nThe helper is a group with a single entity.\nStep 6: Creating the cards\rThe cards are simple NFC cards, but of course, they have to look good; I can\u0026rsquo;t just write the title on the card with an Edding. My daughter can\u0026rsquo;t read.\nSo my way is to print the audio books cover on a sticker. I use these because they come with an online software where I can upload the covers and resize them easily.\nThe result looks okay. It would definitely look cooler with a card printer. But that\u0026rsquo;s just too expensive for me.\nStep 7: Adding and triggering tags\rAfter the NFC reader was added to Home Assistant (which is really easy if you followed the documentation from Github, since it is discovered automatically), you are able to add new tags. This can be done in the tags menu. When swiping an NFC card over the box, a new tag appears. It has a GUID as name. I immediately rename the tag to the content it should contain.\nThe automation that is triggered by the tag scan and actually starts the music is just a tweaked version of the example from the tag documentation. This is how it looks:\nalias: Handle Tag Scan description: \u0026#34;\u0026#34; trigger: - platform: event event_type: tag_scanned condition: - \u0026#34;{{ trigger.event.data.tag_id in tags }}\u0026#34; action: - variables: media_player_entity_id: media_player.liasbox_mediaplayer media_content_id: \u0026#34;{{ tags[trigger.event.data.tag_id].media_content_id }}\u0026#34; media_content_type: \u0026#34;{{ tags[trigger.event.data.tag_id].media_content_type }}\u0026#34; - service: media_player.play_media target: entity_id: media_player.liasbox_mediaplayer data: media_content_id: \u0026#34;{{ media_content_id }}\u0026#34; media_content_type: \u0026#34;{{ media_content_type }}\u0026#34; - service: script.liasbox_setmediaplayersettings data: {} - delay: 2 mode: single max_exceeded: silent variables: tags: 04-6E-DA-67-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/playlist/1u0bu4ezkj4QHDkfjXwKsW?si=76e77a3055134782 media_content_type: playlist 04-1C-E4-67-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/album/33Ss311uVWQViCaipw2laT?si=EfWjPNX4SieRiID3GbpnDA media_content_type: album 04-A3-7A-67-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/album/0FHpjWlnUmplF5ciL84Wpa?si=9DLx-nzTS7uVkoH9YsEvvA media_content_type: album 04-75-8C-67-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/album/3qAjGnHFbafzKWbntBjKb9?si=AeKRaR1eQ7S2RjLf41_aMA media_content_type: album 04-4A-90-67-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/album/6LQALkZO2BD7UJW5Rbe7AQ?si=-BrXCB_2T0ihqJKTxigefg media_content_type: album 04-31-8F-67-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/playlist/5AkNkdpGiTUT1Z1usDdiey?si=8723fd4d8fc5464f media_content_type: playlist 04-83-98-67-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/album/5ju4E5z2e8haWhNVI6jvah?si=sbeJ0sWhTBq2fcYT3WKCSg media_content_type: album 04-2B-82-67-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/playlist/6cKzIXYEkC2TtuTt07lOZe?si=86b2176eec0649e0 media_content_type: playlist 04-84-AA-67-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/album/3XOuj8bXBsPPJ5hmdtcGCd?si=sjuLO1LjTqut3501iOp_AA media_content_type: album 04-04-7A-67-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/album/3MJtb4tIcyxbd7PIm5ASJ9?si=spXJG6INSbSI8szm6SgN_g media_content_type: album 04-22-B8-63-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/album/12TT6OcOHRaM9HfWlfppxN?si=VzwdAKyWT7u9bVpA9L7LeA media_content_type: album 04-EC-BA-63-10-02-89: media_content_id: \u0026gt;- https://open.spotify.com/album/1BDF8UTWY6wpxLzF6um2xQ?si=xX_ocM5NT5uFapCuuL7JKA media_content_type: album As you can see, it\u0026rsquo;s really not that complicated. You just modify the media_player you want to use and add each content as a new row. You get the ID from the tags menu and the link by using Spotifys “Share” button on the album you\u0026rsquo;d like to use.\nThe result\rI really like the new box. My daughter loves it and uses it every day. My wife hates it, because she has to listen to the same audio books every day.\nI learned so much doing this project. And I know that if something breaks, it\u0026rsquo;s my fault and I will be able to fix it.\nMy daughter is happy again and so am I! Thanks, Home Assistant.\nUpdate 2024\rI built a further improved version of the box as a birthday present. But maybe this is content for another post…\n","date":"2024-09-11T00:00:00Z","image":"http://localhost:1313/post/spotify-made-my-daughter-cry-home-assistant-made-her-smile-again/cover_hu2480120144226042098.jpg","permalink":"http://localhost:1313/post/spotify-made-my-daughter-cry-home-assistant-made-her-smile-again/","title":"Spotify made my Daughter cry. Home Assistant made her smile again."},{"content":"The Problem\rWhen our daughter is (finally) asleep, we like to watch a few more series to wind down. Currently, we are into relatively violent stuff like The Boys. My wife likes to tell the anecdote that she used to crawl out of bed as a child, then secretly sit on the stairs and listen to her parents or the television. Once, she even had nightmares because her parents were watching a horror movie and she couldn\u0026rsquo;t get the horrifying screams out of her head.\nBut back to the present:\nI don\u0026rsquo;t want my child to see exploding heads or dismembered people, let alone dream about them.\nHome Assistant to the rescue!\rThe first challenge was to figure out how to detect my daughter\u0026rsquo;s escape attempts in time. The solution is super simple:\nI installed a cheap little door contact on the door to her nursery. Installed is an exaggeration, these things are just stuck on.\nI then integrated it into Home Assistant. When integrating new sensors, it\u0026rsquo;s best to remember to tidy up right away: give them a sensible name and disable any entities you don\u0026rsquo;t need.\nNow I can notice my little runaway as soon as she opens the door!\nThe opening of the door is the trigger of my automation. When this trigger occurs, I pause the playback on my Fire TV Cube and let my speakers make a little warning announcement.\nOf course, this only happens when the cinema is currently enabled and it\u0026rsquo;s our daughter\u0026rsquo;s sleeping time. Otherwise, we would hear the announcement all day long…\nalias: Notify at Fire TV Cube when Lia opens her door description: \u0026#34;\u0026#34; trigger: - platform: state entity_id: - binary_sensor.liasroom_door from: \u0026#34;off\u0026#34; to: \u0026#34;on\u0026#34; condition: - condition: state entity_id: binary_sensor.lia_sleeping state: \u0026#34;on\u0026#34; action: - condition: state entity_id: input_boolean.livingroom_cinema_enabled state: \u0026#34;on\u0026#34; - target: entity_id: tts.home_assistant_cloud data: cache: true message: Lia is awake! media_player_entity_id: media_player.wohnzimmer action: tts.speak mode: single An authentic evening on the couch\rMy wife and I are watching a gore-slasher-nightmare-horror movie Our little escapee sneaks out of her bed and opens the door. The movie pauses immediately; there are no scary noises or destructive images. The announcement confirms that our daughter seems to be awake. One of us can quickly go upstairs and put our daughter back into bed before she even has a chance to look at the screen. Conclusion\rThat\u0026rsquo;s why I love Home Assistant! Such a little automation adds so much value. Sweet dreams!\n","date":"2024-09-08T00:00:00Z","image":"http://localhost:1313/post/home-assistant-saves-my-daughter-from-nightmares/cover_hu2500286936557197303.jpg","permalink":"http://localhost:1313/post/home-assistant-saves-my-daughter-from-nightmares/","title":"Home Assistant saves my Daughter from Nightmares"},{"content":"The Problem\rThe other day I picked up a phrase that still bounces around in my head from time to time.\nIf you don\u0026rsquo;t write in your native language, there\u0026rsquo;s always a risk that details will get lost.\nI\u0026rsquo;ve been blogging in English so far in order to reach more people. But my mother tongue is German. Do I still manage to express what I want to convey?\nI think so™. But even though I think I write good English, it takes me a lot more time and energy to write a post in a foreign language.\nThe Idea\rSo I had the idea to try the best of both worlds:\nWhy not write in my native language, where I have a deep understanding of subtle differences in meaning, idioms and vocabulary, and then simply have everything translated into the target foreign language?\nThe Test\rAnd in fact, what you are reading here is already the result of that experiment.\nI had this text translated from German to English by deepL. It took me barely 10 minutes to write this blog post.\nThe Question\rBut does it still sound like me? Or are the little mistakes I make in my posts due to the foreign language the soul of my blog? Philosophical deep talk today\u0026hellip;\n","date":"2024-09-05T00:00:00Z","image":"http://localhost:1313/post/lost-in-translation/cover_hu12067039558342688031.jpg","permalink":"http://localhost:1313/post/lost-in-translation/","title":"Lost in Translation"},{"content":"The Problem\rMy house is flooded with smart relays from Shelly.\nI use multiple Shelly 2.5 to control all the covers in my house I use a Shelly 1PM to keep track of the production of my balcony power plant I use many Shelly 1 to automate my light switches I have at least 30 smart relays around my house/garden and they work flawlessly! But then there are one or two relays that give me headaches. Especially the one controlling the lights at my stairs. These lights are motion-controlled and I expect them to go off 3 minutes after all motion cleared. But over the last couple of weeks, this has not been happening.. This is very annoying since I had to get out of bed and switch them off manually.\nSo I checked the Home Assistant logs regularly to find the root cause. But all I found was the generic error DeviceConnectionError().\nThen I stumbled on something interesting in the ESPHome docs:\nThat’s why I decided to give ESPHome a try and looked for a way to flash ESPHome onto my Shelly. Maybe this might finally fix the connection errors! Let’s get going!\nCreating the ESPHome firmware\rGo to ESPHome and add a new device. We do not need to connect our Shelly to the computer since we can do everything OTA (over-the-air).\nClick on edit and insert and tweak the following configuration to fit your needs:\n# Basic Config esphome: name: stairs_light_shelly platform: ESP8266 board: esp01_1m wifi: ssid: !secret wifi_ssid password: !secret wifi_password logger: api: ota: # Device Specific Config output: - platform: gpio pin: GPIO4 id: relayid light: - platform: binary name: \u0026#34;stairs_light\u0026#34; output: relayid id: lightid binary_sensor: - platform: gpio pin: number: GPIO5 name: \u0026#34;stairs_light_button\u0026#34; id: switchid Hit save, click the 3 dots and select install. Choose Manual download and download the firmware file in modern format.\nAfter the file was created and downloaded, we have to zip it since the file would be too big to upload it onto the Shelly 1. I use 7-Zip for that. Simply right-click the file and compress it to gzip!\nYou should now have a Shelly 1 ESPHome firmware with extension .bin.gz on your drive.\nFlashing Tasmota as intermediate firmware\rCheck which IP is assigned to the Shelly you want to flash. You can see this in your router or by clicking Visit from inside Home Assistant.\nCheck the table in this repository. In case of a Shelly 1 you’d have to enter the following URL into the browser:\nhttp://YOURIPADDRESS/ota?url=http://ota.tasmota.com/tasmota/shelly/mg2tasmota-Shelly1.zip This will flash Tasmota onto your Shelly.\nAfter 2 minutes you should see a new WiFi network with a name like tasmota-XXXXX. Connect to it and head over to http://192.168.4.1\nHere you can enter your WiFi credentials and hit save. Tasmota will now connect to your WiFi.\nFlashing our ESPHome firmware\rGo back to the IP address of your Shelly. You should see the default page of Tasmota.\nNow it’s important to click on Console and enter\nSetOption78 1 The console should confirm that you enabled the option 78. This enables us to flash firmware files that are not Tasmota builds.\nNow head back to the main menu, select Firmware Upgrade and upload the firmware file we created previously. Start the upgrade! If everything worked out you should get a success message.\nIntegration into Home Assistant\rAfter a short time (or a forced restart of Home Assistant), you will receive a notification that a new ESPHome device has been discovered — automatically!\nThat was easy.\nSummary\rIt is possible to flash ESPHome onto many kinds of Shelly smart relays simply over-the-air. For me this fixed the connection issues I had with a specific Shelly 1.\nThis tutorial might help you if you are trying to solve the same problem!\n","date":"2024-09-04T00:00:00Z","image":"http://localhost:1313/post/fixing-connection-issues-by-flashing-esphome-on-shellys-ota/cover_hu17055202693236264944.jpg","permalink":"http://localhost:1313/post/fixing-connection-issues-by-flashing-esphome-on-shellys-ota/","title":"Fixing Connection Issues by Flashing ESPHome on Shellys OTA"},{"content":"As software developers, we type a lot. And we type very fast… This results in quite some keystrokes over the years. Sadly we don\u0026rsquo;t get younger. Due to that load most of us will feel some signs of wear and tear at some point in their career. For some it\u0026rsquo;s the neck, for others it\u0026rsquo;s a pain in the fingers.\nWhen I reached that point a few years ago, I decided to do something against it. I still have many, many full days of typing ahead of me and if I keep going like that, the pain might get worse. I decided to learn more ergonomic typing!\nProblems with the QWERTY layout\rNext time you are in the office, take a minute and observe a colleague while typing an email. You\u0026rsquo;ll notice that his hands and fingers are moving like crazy, stretching, wrenching and twisting over the keyboard. Even an amateur will see that this arrangement of keys seems to be not very effective. It seems like two keys are always on the exact opposite side of the keyboard making the hands and fingers travelling the maximum distance possible.\nAnd why is that? Because this actually was a design goal of Christopher Sholes when he developed the QWERTY layout that we use on our keyboards today.\nHe had no keyboard, he had a typewriter. When you pressed a key, a metal bar struck the paper to print each character with ink. And if two neighboring metal bars hammered at the same time they could potentially collide and got stuck.\nThat\u0026rsquo;s why Christopher looked at the frequency of common words and letters of the english language and placed the most used letters as far apart as possible. The QWERTY layout was born.\nDiscovering Noted\rKeyboards got rid of metal bars. So lots of smart people used this chance to create alternative layouts not optimize for an outdated goal like less collisions of metal bars but for a really helpful goal like ergonomy! All of them are magnitudes better than QWERTY and I don\u0026rsquo;t want to judge which arguably is the best, but the one I went with is Noted.\nI was extremely hyped, thinking I might have found a solution to save my fingers. But that feeling changed soon\u0026hellip;\nMy learning journey\rI found this beautiful website that gives you exercises to type and tracks your progress over time. I changed my layout to Noted and started\u0026hellip; After one to two days I knew where all the keys were.\nI decided to go cold turkey. From one day to the next, I changed my layout to Noted on all my machines. I printed the layout as a cheat sheet and put it next to my keyboard to get started.\nNow began the hard part. This next two weeks were crushing. I typed around 6 words per minute. It felt like I had a stroke.\nChatting with colleagues became a chore, writing software was nearly impossible, and everything felt clumsy and slow, which was quite frustrating.\nI think this is the first stage where people might give up. And I can totally relate. But with some motivation from a friend of mine who went that road years ago, I kept going.\nAfter 4-5 weeks consistently writing Noted only and exercising with monkey type multiple times a day, I slowly came back to a okayish typing speed. And by that I don\u0026rsquo;t mean fast, I mean I could get some work done. Slowly.\nIt took me around 3 months until it made click. After that time I reached around 30 words per minute, which is not totally embarrassing anymore.\nToday, nearly a year later, I can type at a speed of around 50-60 words per minute. But I am drifting up only talking about speeds while my initial goal was ergonomy. So how does it feel?\nBenefits I\u0026rsquo;ve experienced\rThis is the first time in my life I can actually type blindly. I always was fast and peaked seldomly, but this is another level. I now never look at the keyboard. I even use a keyboard that only has blank key caps. This feels good. And nerdy.\nAdditionally, your fingers seem to naturally rest at the home row. Colleagues say it looks really relaxing when I type. And this is true. Your hand is still while your fingers only make minor movements. You actually can see that when looking at the finger heatmap.\nIn addition to that your fingers seem to roll the words. That might read strange but often you do 2 strokes on the home row with the left hand and then 2 key strokes on the home row with the right hand. This feels natural and almost like playing the piano.\nAnd most important: My pain is gone.\nNoted also has layers. Just like QWERTY changes from minor to capital letters when holding the shift key, Noted changes to another layer.\nThe first layer contains all the special characters. This is super cool especially for programmers since important keys like the brackets are all on the home row. So even this can be typed without hand movements.\nMy favorite is the second layer because you immediately have the arrow keys under your left hand and a number block under the right hand. This helps for navigating code and drastically reduced my mouse usage.\nI could go more into detail but I need to wrap it up here:\nConclusion\rI spent 3 months learning something that will benefit me for the rest of my life. That\u0026rsquo;s a no-brainer. If you experience a strain in the fingers or the neck, give it a try for its ergonomic effects! If you work as a developer, give it a try - you will learn to love its layers while coding. If you, like me, do both, what the hell are you still waiting for?\n","date":"2024-08-30T00:00:00Z","image":"http://localhost:1313/post/my-journey-to-pain-free-typing/cover_hu3438116364366109229.jpg","permalink":"http://localhost:1313/post/my-journey-to-pain-free-typing/","title":"My Journey to Pain-Free Typing"},{"content":"Inversion of Control and Dependency Injection are two of these big buzz words you always hear when talking about modern software development. At least they were when I started going professional. That’s why I invested quite some time to research that topic. I was surprised that our Senior Software Engineer did not…\nI had to explain it to him while reviewing some of my code. I still remember his reaction:\nThat’s it? That easy? I was completely mystified by that stuff for years and you just explained it to me in a short call?\nIf even my valued colleague, who was my mentor for the past few years, still didn’t get that concept, I thought it might be worth writing yet another explanation:\nInversion of Control and Dependency Injection for Dummies!\nDependency Injection\rLet’s say you want to write a piece of code that tracks how much time you spend in front of your computer. You might come up with a simple API like this:\nusing System; namespace ComputerTimeTracker { public interface IComputerTimeTracker { void StartTracking(); void StopTracking(); TimeSpan GetTimeSpendInFrontOfComputer(); } } If my colleague implemented that interface a few years back it would have looked somehow like that:\nusing System; using System.Diagnostics; namespace ComputerTimeTracker { public class ComputerTimeTracker : IComputerTimeTracker { private readonly Stopwatch _stopWatch; public ComputerTimeTracker() { _stopWatch = new Stopwatch(); } public void StartTracking() { _stopWatch.Start(); } public void StopTracking() { _stopWatch.Stop(); } public TimeSpan GetTimeSpendInFrontOfComputer() { return _stopWatch.Elapsed; } } } Simple and straight-forward. The only thing this class needs to do its work is a Stopwatch instance.\nThe class needs an instance of Stopwatch.\nThe class is dependent on a Stopwatch.\nThe Stopwatch is a dependency of the class ComputerTimeTracker.\nSo far, so good. Now let’s just do a little modification to that code:\nusing System; using System.Diagnostics; namespace ComputerTimeTracker { public class ComputerTimeTracker : IComputerTimeTracker { private readonly Stopwatch _stopWatch; public ComputerTimeTracker(Stopwatch stopWatch) { _stopWatch = stopWatch; } public void StartTracking() { _stopWatch.Start(); } public void StopTracking() { _stopWatch.Stop(); } public TimeSpan GetTimeSpendInFrontOfComputer() { return _stopWatch.Elapsed; } } } The only thing that changed is the constructor.\nInstead of creating the instance of Stopwatch inside the constructor we inject it into the constructor.\nWe inject the Stopwatch into the constructor.\nWe inject the dependency Stopwatch into the constructor.\nWe just did a dependency injection.\nAnd I just want to make it clear: That is really all! Dependency injection means nothing more and nothing less than providing a dependency to someone who needs it instead of letting the someone create the dependency itself.\nIt does not matter whether you inject the dependency via the class constructor, via a property, or via a setter-method. All you do is injecting a dependency.\nInversion of Control\rTo quote my colleague again:\nI think we have to discuss this. Now I need to create the Stopwatch instance before I can even create an instance of ComputerTimeTracker. That sucks. Isn’t that a code smell? Object oriented programming always praises information hiding, but now I have to know about a Stopwatch? When I create the instance inside the constructor I just have to create my ComputerTimeTrackerand it will handle the rest for me. I don’t want to know the implementation details, I just want to use the class. In summary: The Stopwatch should be controlled by the ComputerTimeTracker.\nNotice how he already used the word controlled. I’m just gonna think that thought a little bit further:\nIn the approach of my colleague we have clear order of control:\nThe class ComputerTimeTrackeris controlling the Stopwatch.\nIt’s the responsibility of the ComputerTimeTrackerto control the Stopwatch.\nNow notice what changed when looking at the approach where we injected the Stopwatch:\nWe, the users of ComputerTimeTracker, are controlling the Stopwatch.\nIt’s the user’s responsibility to control the Stopwatch.\nYou might have already noticed it. By injecting the dependency we inverted the order of control. We moved the responsibility to control the Stopwatch from the class away to the user of the class. That is inversion of control. And again: That is really all!\nLoose Coupling\rNow that the buzz words are de-mystified we can talk about why we might prefer the approach with dependency injection. Let\u0026rsquo;s enhance our sample code a little further:\nusing System; namespace ComputerTimeTracker { public interface IStopwatch { void Start(); void Stop(); TimeSpan Elapsed { get; } } public class ComputerTimeTracker : IComputerTimeTracker { private readonly IStopwatch _stopWatch; public ComputerTimeTracker(IStopwatch stopWatch) { _stopWatch = stopWatch; } public void StartTracking() { _stopWatch.Start(); } public void StopTracking() { _stopWatch.Stop(); } public TimeSpan GetTimeSpendInFrontOfComputer() { return _stopWatch.Elapsed; } } } All I changed is swapping the class dependency Stopwatch for an interface dependency IStopwatch. That way the class ComputerTimeTrackeris not depending on the class Stopwatch of the .NET framework but loosely coupled to any instance that implements the interface IStopwatch. Now to our biggest benefit:\nUnit tests\rAll dependencies we inject into a class via an interface can be mocked. That is super convenient. Consider the following use case:\nYou start the tracking\nYou spend 42 hours before the computer\nYou stop the tracking\nYou check the spend time\nWriting a unit test for that use case is hard when the Stopwatch instance gets created inside the constructor of ComputerTimeTracker. You can’t really replace it. And when you can’t replace it you can’t control the Stopwatch . So you would have to wait real 42 hours. With dependency injection you can simply inject a mocked Stopwatch into the class, just for the test.\n[TestClass] public class ComputerTimeTrackerTests { [TestMethod] public void Spend42HoursBeforeTheComputer() { var stopwatch = new Mock\u0026lt;IStopwatch\u0026gt;(); stopwatch.Setup(x =\u0026gt; x.Elapsed).Returns(TimeSpan.FromHours(42)); var systemUnderTest = new ComputerTimeTracker(stopwatch.Object); systemUnderTest.StartTracking(); stopwatch.Verify(x =\u0026gt; x.Start(), Times.Once); systemUnderTest.StopTracking(); stopwatch.Verify(x =\u0026gt; x.Stop(), Times.Once); Assert.AreEqual(TimeSpan.FromHours(42), systemUnderTest.GetTimeSpendInFrontOfComputer()); } } Conclusion\rDependency injection and inversion of control are important concepts every developer should know. They are a little hyped and often misunderstood. But if you invest some time to really dig into it you see how dumb easy they actually are.\nWhy are they so hyped at all? For me, it\u0026rsquo;s simply because they enable me to write readable unit tests for my code. That alone sells it for me.\nBut there are more benefits I did not cover here: Dynamic replacement of dependencies or usage of an IoC-Container. But these are topics for a separate article…\nThanks for reading!\n","date":"2024-08-26T00:00:00Z","image":"http://localhost:1313/post/how-i-explained-ioc-and-di-to-our-senior-software-engineer/cover_hu4391083496404208646.jpg","permalink":"http://localhost:1313/post/how-i-explained-ioc-and-di-to-our-senior-software-engineer/","title":"How I explained IoC and DI to our Senior Software Engineer"},{"content":"A new perspective\rThere are lots of links in my head when thinking about testing in software:\na good test suite indicates good software quality a good test suite is a safety net for developers a good test suite saves time in the long run … A talk from Daniel Raniz Raneland just added another surprising perspective:\nA good test suite prevents you from embarrassment.\nThe one thing\rI think this provides us with valuable insights on the minimun requirements of what to test:\nIt\u0026rsquo;s the one thing your team/software is responsible for. The one thing that would be totally embarrassing if it didn\u0026rsquo;t function correctly.\nif you develop the software for a snack vending machine, make sure that the doors open correctly. if you develop a to-do web app, make sure that to-dos can be ticked if you develop a mobile camera app, make sure you can actually take a picture … If the Excel export of your to-do list generates an incorrect file name, users might tolerate it for a while. But if they can\u0026rsquo;t tick their to-dos, they will definitely unsubscribe from your service.\nTicking to-dos is your one thing. Make sure to have that covered completely by the test suite. If starting from scratch, this should be one of the first E2E-tests.\nReturn of Investments of tests\rI like this idea of embarrassment-driven-testing because it relates so well to another new link I noted from a talk by Johannes Stern.\nEvery single test needs a return of investment (ROI).\nYou would not invest your valuable money in a project that does not earn you money in the long run, would you? The same is correct for software tests.\nWe write unit tests because they are cheap and give us a fast response to our changes. This is an instant ROI!\nIntegration-, API-, and E2E-tests are more expensive. Depending on the quality of the existing code they can be very expensive. But no matter the price, testing your one thing is a necessary investment, not just to prevent embarrassment, but to save your business.\nThis same thought can also be true from the opposite perspective: Tests can be a bad investment. If your feature is covered by a great E2E-test, do you really need an API-test and integration-test and unit-tests? Or are they just redundant?\nDon\u0026rsquo;t get me wrong, I am an advocate for testing and support every test that is written. But testing is about quality and not quantity. Having the ROI in mind, maybe it\u0026rsquo;s time to delete those flaky tests that you spend so much time on debugging every week, while not giving you any confidence when they are finally green.\n","date":"2024-07-29T00:00:00Z","image":"http://localhost:1313/post/embarrassment-driven-testing/cover_hu4695336269676545510.jpg","permalink":"http://localhost:1313/post/embarrassment-driven-testing/","title":"Embarrassment-Driven-Testing"},{"content":"Imperfection\rOne important lesson I learned working as a software engineer in the production industry for many years:\nSome things don’t work on the first try.\nThe real-world hardware and corresponding drivers I met and worked with always had some quirks.\nSome hardware disconnects from time to time. Some drivers throw an exception when commands are executed too fast after each other. Some sensors don’t answer your commands at all. Maybe after the third try. The world is not perfect and everyone makes mistakes. Most of the time, hardware and drivers don’t work as you would expect.\nA naive Solution\rA common solution to avoid these irregular effects, if you cannot fix the root cause, is introducing a retry logic for your action. This often looks similar to the following:\nconst int maxAmountOfTries = 3; int currentAmountOfTries = 0; while (true) { if (currentAmountOfTries \u0026gt; maxAmountOfTries) { break; } try { currentAmountOfTries++; DoSomethingThatCanThrowAnException(); break; } catch (Exception) { // ignore or log exception } } This is a great piece of code! It is easy to read, and everyone glimpsing at it knows that this is some retry logic immediately. They could even tweak the number of allowed retries without any deep dive into the code — it’s maintainable, too!\nBut as the code base grows, you will find that construct all over the solution. Even worse: always a little different.\nMost of the time, the variable names differ Sometimes the maximum number of tries is set, and sometimes, the maximum number of retries is set. Some classes retry on exceptions, some on specific results, some on both. These repetitions lead to confusion, which results in bugs.\nDon’t repeat yourself!\nThe Extraction\rA smart team, of course, notices this flaw and tries to eliminate it. Let’s extract that retry logic so it can be reused! I saw several solutions for that over the years:\nA dedicated service for retrying like IRetryService.Retry(...) An extension method on Action or Func These solutions worked most of the time. But they required a significant amount of work! Especially if you want to support retries for both sync and async actions. Still, nearly every bigger project contains some functionality like this.\nParty Parrot to the rescue!\rThere is already an elegant solution to this problem out there! You can use the library Polly to de-clutter your code. The icon of this library is a colorful parrot. That’s why I can’t resist making bad Party Parrot jokes about it — Party or Die!\nDon’t reinvent the wheel!\nHere is what the upper code looks like when Polly comes into place:\nRetryPolicy policy = Policy .Handle\u0026lt;Exception\u0026gt;() .Retry(3); policy.Execute(DoSomethingThatCanThrowAnException); Far less code. In this example, just five lines of code. And it is still clear and precise. That’s a great benefit we have already achieved!\nIt gets better. You remember how I said that hardware behaves strangely from time to time? I once met a sensor that returned double.NaN sometimes. If it did, you just had to let it rest for some seconds and schedule a retry.\nPolly can do that, as well. Here is how I would additionally handle the invalid result and introduce a waiting time between every retry:\nRetryPolicy\u0026lt;double\u0026gt; policy = Policy\u0026lt;double\u0026gt; .Handle\u0026lt;Exception\u0026gt;() .OrResult(Double.NaN) .WaitAndRetry(3, (_, _) =\u0026gt; TimeSpan.FromSeconds(5)); policy.Execute(DoSomethingThatCanThrowAnException); The Advantages\rLet’s focus on the advantages of using Polly for retries:\nGreat API: Short, precise, and easy to read. Polly is widely used and tested. Don’t reinvent a buggy solution. You can reuse common policies by sharing them between classes. I want to emphasize the API once more. Consider the following method: public double DoSomethingCool(CancellationToken token). I love that it takes a CancellationToken.\nWhy? Because any user of this method, every client, knows that it supports cancellation! And even better: Every user of this method can decide how they want to handle cancellation. They can cancel with a timeout, cancel when the user clicks some abort button, or cancel however they want.\nA great API forces the user to use it correctly.\nWe can use the same idea for our retry logic with Polly. Look at the following updated method prototype: public double DoSomethingCool(ISyncPolicy policy, CancellationToken token) .\nI love it! This method seems to support cancellation and execution policies — I know that just by looking at the prototype.\nI can call it in any way I choose! Maybe with five retries on exceptions? Maybe with three retries on double.NaN with a timeout of two seconds max? It’s up to your clients — your method supports it no matter what they decide. Thanks to Polly and the great API design!\nDefinitely check out the readme of Polly because it can do so much more:\nrate-limiting timeouts caching Thanks for reading!\n","date":"2024-07-24T00:00:00Z","image":"http://localhost:1313/post/how-to-implement-retries-without-cluttering-your-code/cover_hu4610033403496438732.jpg","permalink":"http://localhost:1313/post/how-to-implement-retries-without-cluttering-your-code/","title":"How to implement Retries without Cluttering your Code"},{"content":"Do you know the difference between an imperative modelling approach and a declarative one? If not, here is a brief explanation with beer.\nWhen hosting a party in our garage, I need to make sure the fridge is filled with beer. Of course we also organize soft drinks and water, since legend has it that there are people who don\u0026rsquo;t like beer.\nThe Imperative Model\rLet\u0026rsquo;s say I have space for around 30 bottles in my fridge. I put 15 bottles of beer, 10 bottles of soft drinks and 5 bottles of water in it.\nPerfect! Work done, the party can start!\nBut 10 minutes into the party, the work continues. The fridge is getting empty and I have to replenish the supply. My desired state of 15/10/5 bottles has already dropped to roughly 6/5/4.\nI need to move more bottles from the beer, soft drink, and water cases to the fridge to keep them cold.\nPhew… that is quite tedious. The work never stops since it\u0026rsquo;s my job to maintain the desired state of 15/10/5 bottles all night long.\nThat\u0026rsquo;s why I instructed everyone to refill the fridge from time to time when they see a shortage, by sticking a note on the fridge.\nBut chaos soon ensues. We now have very strange fridge-bottle-ratios:\nEither there are too many bottles in the fridge, causing them to roll out and spill all over the floor, Or the fridge is full but doesn\u0026rsquo;t contain a single bottle of beer. … This pretty much sums up how an imperative model works:\nThere is the job of moving bottles from the case to the fridge This has to be done once before the party The bottle count has to be checked regularly The job of restocking the fridge needs to be done repeatedly The imperative model focuses on the actions that need to be done in order to set the system up and keep it running.\nThe Declarative Model\rI learned from my mistakes! I don\u0026rsquo;t want to go to bed at 9pm because I\u0026rsquo;m exhausted from all the work. So, we hired a bartender.\nWe told the bartender our desired state of 15/10/5 bottles, and he handles the rest for us.\nHe sets up the fridge initially, He checks the ratio regularly, He refills the fridge as needed. … In essence, he performs all the jobs I had to do. I can enjoy the party without worry.\nSo from my perspective, the following happened:\nInstead of focusing on the actions that need to be done, I simply defined the desired end-state and delegated the responsibility of achieving that state to the bartender. I don\u0026rsquo;t even care how he does his job, as long as he guarantees that the fridge is always filled as I requested.\nThe declarative model focuses on the desired state while delegating the responsibility of the necessary actions to achieve that state.\nWhy beer?\rThere might be better examples like:\nSetting the room temperature on a thermostat vs. switching a heater on and off all the time depending on the current temperature Asking a cook to provide a buffet for 20 people vs. giving the cook atomic instructions on what to buy, how to cut the ingredients, how to season, … Kubernetes: Scaling pods on load changes … But I like beer. So I chose this example. Deal with it.\nI learned these concepts while reading The Kubernetes Book by Nigel Poulton. It\u0026rsquo;s really well written, and I recommend it to anyone who needs a deep dive into Kubernetes.\n","date":"2024-07-23T00:00:00Z","image":"http://localhost:1313/post/imperative-vs-declarative/cover_hu16860477797429003603.jpg","permalink":"http://localhost:1313/post/imperative-vs-declarative/","title":"Imperative vs. Declarative Models. Explained with Beer"},{"content":"An uplifting read\rPart of being a good developer is reading books and pursuing lifelong learning. One of the books that greatly influenced me as a young professional was “Clean Code” by Robert C. Martin.\nThe best part? It’s an uplifting read. Even with limited software knowledge, you can easily grasp Martin’s concepts. I remember sitting on the train, reading with a smile on my face, and nodding in agreement throughout.\nMartin is spot on! “Clean Code” is the real deal!\nThe Hardliner\rThat’s when my “Clean Code” phase began. I treated all of Martin’s principles as established facts; a guidebook that all good developers must adhere to. I became rather dogmatic, sometimes blindly applying Martin’s suggestions.\nDRY (Don’t Repeat Yourself) — one of the key tenets of Clean Code. I internalized Martin’s ideas and shared them with my colleagues like a prophet. If I noticed something duplicated three times, I’d get nervous and immediately address it through extraction.\n“Extract ’til you drop!” — Martin’s mantra.\nComing of Age\rBecoming a Senior Developer required me to question Martin’s principles. Don’t get me wrong, Martin is still correct and “Clean Code” remains essential. However, blindly adopting all his rules is a mistake. Ponder them; some rules even contradict each other. DRY can lead to complex architectures that breach the KISS (Keep It Simple, Stupid!) principle. It can also lead to disregarding YAGNI (You Ain’t Gonna Need It).\nI’ve come to realize that 6 lines of duplicated code are often cleaner than, for instance, implementing an observer pattern. With those 6 lines, I can instantly understand the code, without having to navigate through multiple classes and interfaces. If those 6 lines turn into 7 lines in 5 years, so be it. It’s an acceptable growth.\nIf you find yourself with 12 lines of duplicated code growing every month, it’s a sign that refactoring should be scheduled.\nSome Advice\rI believe every dedicated developer experiences a dogmatic Clean Code phase, so I won’t advise you to skip it. But keep it brief by critically evaluating Martin’s rules and adopting them only when they truly fit!\nAnother rule I always remember:\nThe developer who has to debug your code is a serial killer who knows where you live!\nWill you offer them 6 lines of code adding items to a list, or will you guide him through the Visitor Pattern to gather those 6 items?\n","date":"2024-07-15T00:00:00Z","image":"http://localhost:1313/post/beyond-the-dogma-an-unpopular-opinion-on-clean-code/cover_hu18056593503731979405.jpg","permalink":"http://localhost:1313/post/beyond-the-dogma-an-unpopular-opinion-on-clean-code/","title":"Beyond the Dogma: An unpopular opinion on Clean Code"},{"content":"Exception handling is not easy. It can be done in the wrong places, it can be done the wrong way, and it can even be forgotten completely.\nThe best we can do to help our fellow developers with that problem is to design our API as bulletproof as possible.\nAn exception-less approach via the Result Pattern is a step in that direction.\nIn this article, I will guide you through a typical software problem I faced multiple times working in the production industry. I will provide some simple examples, share my thoughts, and explain why I prefer the exception-less approach in this use case.\nThe Manufacturer’s DLL\rI often have to deal with actual hardware at my job.\nOpening/Closing valves Switching relais Retrieving values from temperature sensors Moving actuators … All these expensive hardwares gets shipped with a piece of software in form of a DLL from the manufacturer.\nLet’s say we want to measure the ambient pressure and bought some expensive pressure sensor. The manufacturer provided us with a driver that has the following features:\npublic interface IPressureSensorDriver { void Init(); void StartMeasurement(); void StopMeasurement(); double GetPressure(); } As for most manufacturer DLLs the API is not very convenient. To actually poll the current ambient pressure we have to\nCall Init() Call StartMeasurement() Call StopMeasurement() Call GetPressure() Don’t repeat yourself!\rSince we don’t want calls repeated all over our solution we will introduce a new class that wraps the manufacturer\u0026rsquo;s driver and acts as a convenient service for us.\npublic class PressureService { private readonly IPressureSensorDriver _driver; public PressureService(IPressureSensorDriver driver) { _driver = driver; } public double GetPressure() { _driver.Init(); _driver.StartMeasurement(); _driver.StopMeasurement(); double pressure = _driver.GetPressure(); return pressure; } } Let’s test our service by polling the pressure multiple times in a row:\npublic class Program { public static async Task Main(string[] args) { var driver = new PressureSensorDriver(); var pressureService = new PressureService(driver); for (int i = 0; i \u0026lt; 4; i++) { double pressure = pressureService.GetPressure(); Console.WriteLine($\u0026#34;Pressure: {pressure}\u0026#34;); await Task.Delay(1000); } Console.ReadKey(); } } And of course: As soon as we run the application we’ll get an unhandled exception:\nException Unhandled — System.Exception: ‘Connection to Sensor interrupted.’\nWhat did we do wrong?\rWe just called a method from another application layer without any exception handling.\nThe driver class is a third-party code we do not know. Nevertheless we crossed that border without any safety net. We just assumed that the method will work as expected.\nAlways handle exceptions on application borders!\nThis includes:\nHardware calls no matter the communication protocol Web Requests or anything that depends on the internet External code, either unknown, undocumented or untested The Classic Solution\rSince we already found the problem, let’s implement the classic solution for it: a try-catch right in our service:\npublic class PressureService { private readonly IPressureSensorDriver _driver; public PressureService(IPressureSensorDriver driver) { _driver = driver; } public double GetPressure() { try { _driver.Init(); _driver.StartMeasurement(); _driver.StopMeasurement(); double pressure = _driver.GetPressure(); return pressure; } catch { return double.NaN; } } } That, of course, will work. All exceptions will be swallowed by our catch. If something goes wrong, we simply return a double.NaN . We are now exception-less!\nBut there are some flaws. Let’s look at the API of our service from a user’s view. And with API I simply mean our method GetPressure(); its name, its return type and its input arguments. Because that is all the user sees.\nThe user has no way to know whether the method throws an exception or not. He has no way to decide whether he has to put that method call in a try/catch without looking into it. That sucks. The user has no way to know whether the method was a success or not. Even when the method ran without an exception, he has to check whether he got a valid number or double.NaN. That sucks, as well. The Try Pattern\rLet’s tweak our service a little further to see if we can get rid of these flaws:\npublic class PressureService { private readonly IPressureSensorDriver _driver; public PressureService(IPressureSensorDriver driver) { _driver = driver; } public bool TryGetPressure(out double pressure) { try { _driver.Init(); _driver.StartMeasurement(); _driver.StopMeasurement(); pressure = _driver.GetPressure(); return true; } catch { pressure = Double.NaN; return false; } } } Our method now returns the pressure via an out variable. The return value of the method now is a bool indicating success or failure of the method. We also tweaked the name of our method from GetPressure to TryGetPressure.\nWe just implemented the Try Pattern.\nWhat have we won that way?\rMethod names starting with Try are exception-less! That is the most important part of the Try Pattern.\nJust by reading the method’s name the user of our service already knows that he does not need to handle any exceptions when calling it. This sounds so trivial but is a big part of API design:\nIf you let the user know what to expect, he will do it the correct way.\nThe other flaw was eliminated, as well: The user can simply check the returned bool flag to see if the method call was a success or not. He does not need to look at the pressure value at all, when the method already returned false.\nBut in my opinion there are some new flaws:\nI don’t like the syntax of out variables. A lot of Clean Code Prophets would sign that immediately. It’s just confusing — everyone expects the outputs of the method left to its name and suddenly there is in output right between the inputs? Just because we can, does not mean we should. Don’t obfuscate your code with all the syntax sugar your language provides. Keep it Simple! We only have a single, binary result. But most of the time we want to provide the user of our method with more information. Consider all the reasons our method could fail: The service could not connect to the sensor? The service was connected to the sensor but the connection was lost? The sensor returned a value but it is not plausible? There might be different ways the user wants to handle each of these situations. In some he might schedule a retry, in others he might simply show a descriptive error message. The Result Pattern\rTo even solve these flaws, let’s tweak our service even a little further:\npublic class PressureService { private readonly IPressureSensorDriver _driver; public PressureService(IPressureSensorDriver driver) { _driver = driver; } public Result\u0026lt;double\u0026gt; GetPressure() { try { _driver.Init(); _driver.StartMeasurement(); _driver.StopMeasurement(); pressure = _driver.GetPressure(); if(pressure \u0026lt; 0) { return Result.Fail(\u0026#34;Pressure is not plausible.\u0026#34;); } return Result.Ok(pressure); } catch() { return Result.Fail(\u0026#34;Could not retrieve Pressure from Sensor.\u0026#34;); } } } In this version we don’t return a bool but a full object of type Result\u0026lt;double\u0026gt;.\nBefore digging deeper into the type Result, have a look at the new usage of our service:\npublic static async Task Main(string[] args) { var driver = new PressureSensorDriver(); var pressureService = new PressureService(driver); Result\u0026lt;double\u0026gt; pressure = pressureService.GetPressure(); if (pressure.IsFailed) { HandleErrorWhileRetrievingPressure(pressure.Errors); } Console.WriteLine($\u0026#34;Pressure: {pressure}\u0026#34;); Console.ReadKey(); } If you review the API and its usage you will notice:\nYou do not retrieve a double but a Result\u0026lt;double\u0026gt;. You are forced to think about what you will do if the operation failed. Just by using Result\u0026lt;double\u0026gt; you know that there could be problems. You wouldn’t have noticed that if I just threw an exception inside the method, would you? And that is the big benefit of the Result Pattern.\nA good API forces the user to use it correctly! It makes it nearly impossible to forget about error handling.\nThe Result Object\rThe result object simply contains the actual value you are interested in plus any additional information you need — error reasons, success reasons, helper methods like IsFailed — be creative!\nThis pattern is not new; it’s a classic. There are many libraries for the Result Pattern available, so you don’t even have to implement your own Result class!\nMy .NET example used the great project FluentResults.\nConclusion\rJust to digest, I will repeat my introduction:\nException handling is not easy. It can be done in the wrong places, it can be done the wrong way, and it can even be forgotten completely.\nThe best we can do to help our fellow developers with that problem is to design our API as bulletproof as possible.\nAn exception-less approach via the Result Pattern is a step in that direction.\nThanks for reading!\n","date":"2024-07-08T00:00:00Z","image":"http://localhost:1313/post/how-and-where-to-handle-exceptions-while-maintaining-a-great-api/cover_hu538446735154910912.jpg","permalink":"http://localhost:1313/post/how-and-where-to-handle-exceptions-while-maintaining-a-great-api/","title":"How and Where to handle Exceptions while Maintaining a Great API"}]